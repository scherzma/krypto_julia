#!/usr/bin/env python3

import sys
import os
import subprocess
import time
import socket

PORTS_FILE = "/tmp/julia_ports.tmp"
BUILD_SCRIPT = "./build"  # Adjust the path if 'build' is located elsewhere
LOCKFILE_DIR = "/tmp"

def start_julia_server():
    # print("No Julia servers are running. Starting one using the 'build' script.")
    script_dir = os.path.dirname(os.path.abspath(__file__))
    build_path = os.path.join(script_dir, "build")
    
    try:
        subprocess.check_call([build_path])
    except subprocess.CalledProcessError:
        print("Failed to start Julia server using the 'build' script.")
        sys.exit(1)
    
    # Wait briefly to ensure the server starts
    time.sleep(1)

def get_last_port():
    try:
        with open(PORTS_FILE, 'r') as f:
            ports = f.readlines()
            if not ports:
                return None
            return int(ports[-1].strip())
    except FileNotFoundError:
        return None
    except ValueError:
        print(f"Invalid port number in {PORTS_FILE}.")
        return None

def send_command(port, message):
    try:
        with socket.create_connection(("localhost", port), timeout=5) as sock:
            sock.sendall((message + "\n").encode())
            response = sock.recv(4096).decode().strip()
            return response
    except (ConnectionRefusedError, socket.timeout) as e:
        return None
    except Exception as e:
        print(f"Unexpected error while communicating with Julia server: {e}")
        return None

def remove_last_port():
    try:
        with open(PORTS_FILE, 'r') as f:
            lines = f.readlines()
        if lines:
            lines = lines[:-1]
            with open(PORTS_FILE, 'w') as f:
                f.writelines(lines)
    except Exception as e:
        print(f"Error removing last port from {PORTS_FILE}: {e}")

def main():
    if len(sys.argv) != 2:
        print("Usage: kauma <argument>")
        sys.exit(1)
    
    arg = sys.argv[1]
    
    port = get_last_port()
    if port is None:
        start_julia_server()
        port = get_last_port()
        if port is None:
            print("No Julia servers are running after attempting to start one.")
            sys.exit(1)
    
    response = send_command(port, arg)
    
    if not response:
        print(f"No response from Julia server on port {port}. Attempting to restart the server.")
        remove_last_port()
        start_julia_server()
        port = get_last_port()
        if port is None:
            print("Failed to retrieve new port after restarting Julia server.")
            sys.exit(1)
        response = send_command(port, arg)
        if not response:
            print(f"Still no response from Julia server on port {port}. Exiting.")
            sys.exit(1)
    
    print(response)

if __name__ == "__main__":
    main()
