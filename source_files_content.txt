Directory Structure:
===================

📁 Krypto/
    📁 src/
        📁 algorithms/
            📄 gcm.jl (Content follows below)
            📄 sea128.jl (Content follows below)
            📄 xex_fde.jl (Content follows below)
        📁 math/
            📄 galois.jl.bak
            📄 galois_fast.jl (Content follows below)
        📁 testing/
            📄 performance.jl (Content follows below)
        📁 util/
            📄 conversions.jl (Content follows below)
            📄 processor.jl (Content follows below)
            📄 semantic_types.jl (Content follows below)
        📄 Krypto.jl (Content follows below)
    📄 kauma
    📄 Manifest.toml
    📄 Project.toml
    📄 sample.json
    📄 sample_small.json
    📄 script.py


File Contents:
=============


===========================================
File: kauma
===========================================

#!/usr/bin/env julia

using JSON
#using PackageCompiler


include("src/util/processor.jl")
using .Processing: process

function main()
    file::String = "./sample.json"

    if length(ARGS) == 1
        file = ARGS[1]
    end
    
    @time jsonContent = JSON.parsefile(file)
    @time process(jsonContent)
end



main()


#create_app(".", "Krypto",
#    precompile_execution_file="./kauma",
#    force=true,
#    filter_stdlibs=true,
#    cpu_target="native",
#)

# julia --threads=auto --project=. kauma

===========================================
File: src\Krypto.jl
===========================================

module Krypto

using JSON
include("util/processor.jl")

export process

end

===========================================
File: src\algorithms\gcm.jl
===========================================


module GCM

include("sea128.jl")
include("../math/galois_fast.jl")

using Nettle
using Base64
using .Sea128: encrypt_sea, decrypt_sea
using .Galois_quick: FieldElement_quick


arr_to_int(arr::Array{UInt8}) = reinterpret(UInt128, reverse(arr))[1]
padl(len::Int) = (16 - (len & 0x0F)) & 0x0F ## pad with zeros to the next multiple of 16
pad_array(arr::Array{UInt8}) = [arr; zeros(UInt8, padl(length(arr)))]

function ghash(key::Array{UInt8}, nonce::Array{UInt8}, text::Array{UInt8}, ad::Array{UInt8}, algorithm::String)

    enc_func = algorithm == "aes128" ? encrypt : encrypt_sea 
    auth_key = enc_func("aes128", key, zeros(UInt8, 16))
    auth_key = FieldElement_quick(arr_to_int(auth_key), GCM)

    len_block = vcat(
        reverse(reinterpret(UInt8, [length(ad) << 3])),
        reverse(reinterpret(UInt8, [length(text) << 3]))
    )
    
    Y = FieldElement_quick(UInt128(0), GCM)
    data = [pad_array(ad); pad_array(text); len_block]

    for i in 1:16:(length(data) - 1)
        Y += data[i:i+15]
        Y *= auth_key
    end

    tag = Y + enc_func("AES128", key, [nonce; UInt8[0,0,0,1]])

    return tag, len_block, auth_key
end


function crypt_gcm(key::Array{UInt8}, text::Array{UInt8}, nonce::Array{UInt8}, algorithm::String)

    result_text = Array{UInt8}(undef, 0)
    enc_func = algorithm == "aes128" ? encrypt : encrypt_sea


    for i in 1:16:(length(text))
        temp_nonce = [nonce; reverse!(reinterpret(UInt8, [UInt32(i+1)]))]
        enc_i = enc_func("AES128", key, temp_nonce)
        end_idx = min(i+15, length(text))
        block = text[i:end_idx]
        enc_block = enc_i[1:length(block)]
        append!(result_text, block .⊻ enc_block)
    end

    return result_text
end

function decrypt_gcm(key::Array{UInt8}, ciphertext::Array{UInt8}, ad::Array{UInt8}, nonce::Array{UInt8}, algorithm::String)
    auth_tag = ghash(key, nonce, ciphertext, ad, algorithm)
    plaintext = crypt_gcm(key, ciphertext, nonce, algorithm)
    return plaintext, auth_tag[1], auth_tag[2], auth_tag[3]
end


function encrypt_gcm(key::Array{UInt8}, plaintext::Array{UInt8}, ad::Array{UInt8}, nonce::Array{UInt8}, algorithm::String)
    ciphertext = crypt_gcm(key, plaintext, nonce, algorithm)
    auth_tag = ghash(key, nonce, ciphertext, ad, algorithm)
    return ciphertext, auth_tag[1], auth_tag[2], auth_tag[3]
end

end

===========================================
File: src\algorithms\sea128.jl
===========================================

module Sea128

using Nettle

const SEA_CONST = Array{UInt8}([0xc0, 0xff, 0xee, 0xc0, 0xff, 0xee, 0xc0, 0xff, 0xee, 0xc0, 0xff, 0xee, 0xc0, 0xff, 0xee, 0x11])

function encrypt_sea(key::Array{UInt8}, input::Array{UInt8})
    return encrypt("AES128", key, input) .⊻ SEA_CONST
end

function encrypt_sea(algorithm::String, key::Array{UInt8}, input::Array{UInt8})
    return encrypt(algorithm, key, input) .⊻ SEA_CONST
end

function decrypt_sea(key::Array{UInt8}, input::Array{UInt8})
    return decrypt("AES128", key, input .⊻ SEA_CONST)
end

function decrypt_sea(algorithm::String, key::Array{UInt8}, input::Array{UInt8})
    return decrypt(algorithm, key, input .⊻ SEA_CONST)
end

end

===========================================
File: src\algorithms\xex_fde.jl
===========================================

module FDE

include("sea128.jl")
using .Sea128: encrypt_sea, decrypt_sea
using Base64


function mul_alpha!(tweak::Vector{UInt8})
    carry = (tweak[16] & 0x80) != 0
    for i in 16:-1:2
        tweak[i] = ((tweak[i] << 1) & 0xFF) | (tweak[i-1] >> 7)
    end
    tweak[1] = ((tweak[1] << 1) & 0xFF)
    tweak[1] = tweak[1] ⊻ (carry ? 0x87 : 0x00)
end


function crypt_fde(key::Array{UInt8}, tweak::Array{UInt8}, input::Array{UInt8}, mode::String)
    k1, k2 = key[1:16], key[17:32]

    tweak = encrypt_sea(k2, tweak)
    text = Array{UInt8}(undef, 0)
    crypt_function = mode == "encrypt" ? encrypt_sea : decrypt_sea

    for i in 1:16:length(input)
        block = input[i:i+15] .⊻ tweak
        append!(text, (crypt_function(k1, block) .⊻ tweak)) 
        mul_alpha!(tweak)
    end
    return text
end

function encrypt_fde(key::Array{UInt8}, tweak::Array{UInt8}, input::Array{UInt8})
    return crypt_fde(key, tweak, input, "encrypt")
end

function decrypt_fde(key::Array{UInt8}, tweak::Array{UInt8}, input::Array{UInt8})
    return crypt_fde(key, tweak, input, "decrypt")
end

end

===========================================
File: src\math\galois_fast.jl
===========================================


module Galois_quick

include("../util/semantic_types.jl")
using .SemanticTypes: Semantic, GCM, XEX
using Base64

import Base: +, *, ⊻, <<, >>, %, show, length

struct FieldElement_quick
    value::UInt128
    semantic::Semantic

    function FieldElement_quick(value::UInt128, semantic::Semantic, skip_mani::Bool=false)
        new(value, semantic)
    end
end

const GF128_MODULUS = UInt128(0x87)  # x^128 + x^7 + x^2 + x + 1
const MASK_128 = UInt128(1) << 127

const BIT_REVERSE_TABLE = UInt8[0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240, 8, 136, 72, 200, 40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248, 4, 132, 68, 196, 36, 164, 100, 228, 20, 148, 84, 212, 52, 180, 116, 244, 12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250, 6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254, 1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81, 209, 49, 177, 113, 241, 9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217, 57, 185, 121, 249, 5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117, 245, 13, 141, 77, 205, 45, 173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253, 3, 131, 67, 195, 35, 163, 99, 227, 19, 147, 83, 211, 51, 179, 115, 243, 11, 139, 75, 203, 43, 171, 107, 235, 27, 155, 91, 219, 59, 187, 123, 251, 7, 135, 71, 199, 39, 167, 103, 231, 23, 151, 87, 215, 55, 183, 119, 247, 15, 143, 79, 207, 47, 175, 111, 239, 31, 159, 95, 223, 63, 191, 127, 255]


Base.:⊻(a::FieldElement_quick, b::FieldElement_quick) = FieldElement_quick(a.value ⊻ b.value, a.semantic)
Base.:⊻(a::FieldElement_quick, b::UInt128) = FieldElement_quick(a.value ⊻ b, a.semantic)
Base.:>>(a::FieldElement_quick, b::Int) = FieldElement_quick(a.value >> b, a.semantic)
Base.:>>(a::FieldElement_quick, b::Int) = FieldElement_quick(a.value >> b, a.semantic)
Base.:%(a::FieldElement_quick, b::UInt128) = FieldElement_quick(a.value % b, a.semantic)
Base.:%(a::FieldElement_quick, b::FieldElement_quick) = FieldElement_quick(a.value % b.value, a.semantic)
Base.show(io::IO, a::FieldElement_quick) = print(io, "FieldElement($(a.value), $(a.semantic))")
bit_string(a::FieldElement_quick) = join(reverse(digits(a.value, base=2, pad=128)))
to_polynomial(a::FieldElement_quick) = [x for x in 0:127 if (a.value >> x) % 2 == 1]
get_bytes(a::FieldElement_quick) = base64decode(a.to_block())
Base.:+(a::FieldElement_quick, b::FieldElement_quick) = FieldElement_quick(a.value ⊻ b.value, a.semantic)



function int_to_semantic(x::UInt128, semantic::Semantic)
    if semantic == GCM
        return bitreverse(x)
    elseif semantic == XEX
        return bswap(x)
    end
end


function uint8_to_uint128(bytes::Vector{UInt8})::UInt128
    length(bytes) == 16 || throw(ArgumentError("Input must be exactly 16 bytes"))
    @inbounds begin
        result = (UInt128(bytes[1]) << 120) | (UInt128(bytes[2]) << 112) | (UInt128(bytes[3]) << 104) | (UInt128(bytes[4]) << 96) |
                 (UInt128(bytes[5]) << 88)  | (UInt128(bytes[6]) << 80)  | (UInt128(bytes[7]) << 72)  | (UInt128(bytes[8]) << 64) |
                 (UInt128(bytes[9]) << 56)  | (UInt128(bytes[10]) << 48) | (UInt128(bytes[11]) << 40) | (UInt128(bytes[12]) << 32) |
                 (UInt128(bytes[13]) << 24) | (UInt128(bytes[14]) << 16) | (UInt128(bytes[15]) << 8)  | UInt128(bytes[16])
    end
    return result
end



function FieldElement_quick(x::UInt128, semantic::Semantic)
    FieldElement_quick(int_to_semantic(x, semantic), semantic, true)
end

function FieldElement_quick(poly::Array{UInt8}, semantic::Semantic)
    aggregate::UInt128 = 0
    one::UInt128 = 1
    for i in poly
        if i < 128
            aggregate |= (one << i)
        end
    end
    FieldElement_quick(aggregate, semantic, true)
end

function FieldElement_quick(base64::String, semantic::Semantic)
    a_array = base64decode(base64)
    value::UInt128 = uint8_to_uint128(a_array)
    FieldElement_quick(int_to_semantic(value, semantic), semantic, true)
end



function Base.:+(a::FieldElement_quick, b::Vector{UInt8})

    length(b) == 16 || throw(ArgumentError("Input must be exactly 16 bytes"))

    value = uint8_to_uint128(b)
    int_value = int_to_semantic(value, a.semantic)

    return FieldElement_quick(int_value ⊻ a.value, a.semantic, true)
end


function Base.:*(a::FieldElement_quick, b::FieldElement_quick)
    aggregate = UInt128(0)
    tmp_a = a.value
    tmp_b = b.value


    if (tmp_b & UInt128(1)) == 1
        aggregate ⊻= tmp_a
    end

    prev_high_bit = UInt128(0)

    for i in 1:128
        prev_high_bit = (tmp_a & (UInt128(1) << 127)) != 0
        tmp_a <<= 1
        
        if prev_high_bit
            tmp_a ⊻= GF128_MODULUS
        end
        
        if (tmp_b >> i) & UInt128(1) == 1
            aggregate ⊻= tmp_a
        end

    end
    
    return FieldElement_quick(aggregate, a.semantic, true)
end


function to_block(a::FieldElement_quick)
    bytes = Vector{UInt8}(undef, 16)
    value::UInt128 = a.value

    
    if a.semantic == XEX
        bytes = reinterpret(UInt8, [value])
    elseif a.semantic == GCM
        value = bitreverse(value)
        bytes = reverse!(reinterpret(UInt8, [value]))
    end
    
    return base64encode(bytes)
end


import Base: getproperty
function getproperty(gf::FieldElement_quick, sym::Symbol)
    if sym === :bit_string
        return () -> bit_string(gf)
    end
    if sym === :to_block
        return () -> to_block(gf)
    end
    if sym === :to_polynomial
        return () -> to_polynomial(gf)
    end
    return getfield(gf, sym)
end


end





===========================================
File: src\testing\performance.jl
===========================================

using BenchmarkTools

# Original function
function int_to_semantic(x::UInt128, semantic::String)
    value::UInt128 = 0
    if semantic == "gcm"
        x = (x << 64) | (x >> 64)                           # Swap 64-bit halves
        x = ((x << 32) & 0xFFFFFFFF00000000FFFFFFFF00000000) | ((x >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF)
        x = ((x << 16) & 0xFFFF0000FFFF0000FFFF0000FFFF0000) | ((x >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF)
        x = ((x << 8)  & 0xFF00FF00FF00FF00FF00FF00FF00FF00) | ((x >> 8)  & 0x00FF00FF00FF00FF00FF00FF00FF00FF)
        x = ((x << 4)  & 0xF0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0) | ((x >> 4)  & 0x0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F0F)
        x = ((x << 2)  & 0xCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCCC) | ((x >> 2)  & 0x3333333333333333333333333333333333)
        x = ((x << 1)  & 0xAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA) | ((x >> 1)  & 0x5555555555555555555555555555555555)
        value = x
    elseif semantic == "xex"
        x = (x << 64) | (x >> 64)                           # Swap 64-bit halves
        x = ((x << 32) & 0xFFFFFFFF00000000FFFFFFFF00000000) | ((x >> 32) & 0x00000000FFFFFFFF00000000FFFFFFFF)
        x = ((x << 16) & 0xFFFF0000FFFF0000FFFF0000FFFF0000) | ((x >> 16) & 0x0000FFFF0000FFFF0000FFFF0000FFFF)
        x = ((x << 8)  & 0xFF00FF00FF00FF00FF00FF00FF00FF00) | ((x >> 8)  & 0x00FF00FF00FF00FF00FF00FF00FF00FF)
        value = x
    else
        throw(ArgumentError("Unknown semantic: $semantic"))
    end

    return value
end

@enum Semantic GCM XEX
# XEX case - just byte reversal
function int_to_semantic(x::UInt128, ::Val{:xex})
    return bswap(x)
end

# GCM case - bit reversal 
function int_to_semantic(x::UInt128, ::Val{:gcm})
    return bitreverse(x)
end

# Wrapper function for backward compatibility if needed
function int_to_semantic(x::UInt128, semantic::String)
    if semantic == "gcm"
        return int_to_semantic(x, Val(:gcm))
    elseif semantic == "xex"
        return int_to_semantic(x, Val(:xex))
    else
        throw(ArgumentError("Unknown semantic: $semantic"))
    end
end


test_bytes = rand(UInt128, 1000)

# Original function
func1(x) = int_to_semantic(x, "gcm")
func1_xex(x) = int_to_semantic(x, "xex")

# Optimized function 
func2(x) = int_to_semantic_claude(x, "gcm")
func2_xex(x) = int_to_semantic_claude(x, "xex")

# Verify correctness for GCM
for x in test_bytes[1:10]  # Test first 10 values
    @assert func1(x) == func2(x) "Mismatch in GCM mode for value: $x"
end

# Verify correctness for XEX
for x in test_bytes[1:10]  # Test first 10 values
    @assert func1_xex(x) == func2_xex(x) "Mismatch in XEX mode for value: $x"
end

println("GCM mode benchmarks:")
@btime func1($(test_bytes[1]))        # Original GCM function
@btime func2($(test_bytes[1]))        # Optimized GCM function

println("\nXEX mode benchmarks:")
@btime func1_xex($(test_bytes[1]))    # Original XEX function
@btime func2_xex($(test_bytes[1]))    # Optimized XEX function

===========================================
File: src\util\conversions.jl
===========================================



module Conversions
using Nemo
using Base64

function base64_to_Nemo(base64::String, semantic::String)

    result::ZZRingElem = 0
    a_array = base64decode(base64)

    if semantic == "xex"
        reverse!(a_array)
        for byte in a_array
            result = result << 8  # Shift left by 8 bits
            result = result | ZZ(byte)  # OR with current byte
        end
    elseif semantic == "gcm"
        for byte in a_array
            result = result << 8  # Shift left by 8 bits
            result = result | ZZ(byte)  # OR with current byte
        end
    end

    return result
end

end

===========================================
File: src\util\processor.jl
===========================================



module Processing
using JSON
using Base64
include("../math/galois_fast.jl")
include("../algorithms/sea128.jl")
include("../algorithms/xex_fde.jl")
include("../algorithms/gcm.jl")
include("../util/semantic_types.jl")
using .SemanticTypes: Semantic, GCM, XEX
using .Galois_quick: FieldElement_quick
using .Sea128: encrypt_sea, decrypt_sea
using .FDE: encrypt_fde, decrypt_fde
using .GCM: encrypt_gcm, decrypt_gcm


function add_numbers(jsonContent::Dict)
    return jsonContent["number1"] + jsonContent["number2"]
end

function subtract_numbers(jsonContent::Dict)
    return jsonContent["number1"] - jsonContent["number2"]
end

function poly2block(jsonContent::Dict)
    coefficients::Array{UInt8} = jsonContent["coefficients"]
    semantic::Semantic = (jsonContent["semantic"] == "gcm" ? GCM : XEX)
    gf = FieldElement_quick(coefficients, semantic)
    return gf.to_block()
end

function block2poly(jsonContent::Dict)
    semantic::Semantic = (jsonContent["semantic"] == "gcm" ? GCM : XEX)
    block::String = jsonContent["block"]

    gf = FieldElement_quick(block, semantic)

    result = gf.to_polynomial()
    return result
end

function gfmul(jsonContent::Dict)
    semantic::Semantic = (jsonContent["semantic"] == "gcm" ? GCM : XEX)
    a::String = jsonContent["a"]
    b::String = jsonContent["b"]

    gf_a = FieldElement_quick(a, semantic)
    gf_b = FieldElement_quick(b, semantic)

    product = gf_a * gf_b
    return product.to_block()
end

function sea128(jsonContent::Dict)
    mode::String = jsonContent["mode"]
    key::String = jsonContent["key"]
    input::String = jsonContent["input"]
    
    key_bytes = base64decode(key)
    input_bytes = base64decode(input)

    if mode == "encrypt"
        result_bytes = encrypt_sea(key_bytes, input_bytes)
    elseif mode == "decrypt"
        result_bytes = decrypt_sea(key_bytes, input_bytes)
    end

    return base64encode(result_bytes)
end

function xex(jsonContent::Dict)
    mode::String = jsonContent["mode"]
    key::String = jsonContent["key"]
    tweak::String = jsonContent["tweak"]
    input::String = jsonContent["input"]

    key_bytes = base64decode(key)
    tweak_bytes = base64decode(tweak)
    input_bytes = base64decode(input)

    if mode == "encrypt"
        result_bytes = encrypt_fde(key_bytes, tweak_bytes, input_bytes)
    elseif mode == "decrypt"
        result_bytes = decrypt_fde(key_bytes, tweak_bytes, input_bytes)
    end

    return base64encode(result_bytes)
end

function gcm_crypt(jsonContent::Dict, mode::String)
    algorithm::String = jsonContent["algorithm"]
    key::String = jsonContent["key"]
    ad::String = jsonContent["ad"]
    nonce::String = jsonContent["nonce"]

    text::String = ""
    if mode == "encrypt"
        text = jsonContent["plaintext"]
    elseif mode == "decrypt"
        text = jsonContent["ciphertext"]
        tag::String = jsonContent["tag"]
    end

    key_bytes = base64decode(key)
    ad_bytes = base64decode(ad)
    nonce_bytes = base64decode(nonce)
    text_bytes = base64decode(text)

    if mode == "encrypt"
        result = encrypt_gcm(key_bytes, text_bytes, ad_bytes, nonce_bytes, algorithm)
        return base64encode(result[1]), result[2].to_block(), base64encode(result[3]), result[4].to_block()
    elseif mode == "decrypt"
        result = decrypt_gcm(key_bytes, text_bytes, ad_bytes, nonce_bytes, algorithm)
        return result[2].to_block() == tag, base64encode(result[1])
    end

    return result
end

function gcm_decrypt(jsonContent::Dict)
    mode::String = "decrypt"
    return gcm_crypt(jsonContent, mode)
end

function gcm_encrypt(jsonContent::Dict)
    mode::String = "encrypt"
    return gcm_crypt(jsonContent, mode)
end

function padding_oracle_chaggpt(jsonContent::Dict)
    return "plaintext"
end


ACTIONS::Dict{String, Vector{Any}} = Dict(
    "add_numbers" => [add_numbers, ["sum"]],
    "subtract_numbers" => [subtract_numbers, ["difference"]],
    "poly2block" => [poly2block, ["block"]],
    "block2poly" => [block2poly, ["coefficients"]],
    "gfmul" => [gfmul, ["polynomial"]],
    "sea128" => [sea128, ["ciphertext"]],
    "xex" => [xex, ["ciphertext"]],
    "gcm_encrypt" => [gcm_encrypt, ["ciphertext", "tag", "L", "H"]],
    "gcm_decrypt" => [gcm_decrypt, ["authentic", "plaintext"]],
    "padding_oracle" => [padding_oracle_chaggpt, ["plaintext"]],
)

function process(jsonContent::Dict)

    result_testcases = Dict()

    for (key, value) in jsonContent["testcases"]
        action = value["action"]
        arguments = value["arguments"]
        output_key = ACTIONS[action][2]

        if !haskey(ACTIONS, action)
            throw(ProcessingError("Unknown action: $action"))
        end

        result = ACTIONS[action][1](arguments)
        json_result = Dict()

        for (i, key) in enumerate(output_key)
            if length(ACTIONS[action][2]) == 1
                json_result[key] = result
            else
                json_result[key] = result[i]
            end
        end

        result_testcases[key] = json_result
    end

    println(JSON.json(result_testcases, 1))

end
end

===========================================
File: src\util\semantic_types.jl
===========================================

module SemanticTypes
@enum Semantic GCM XEX
export Semantic, GCM, XEX
end