Directory Structure:
===================

📁 Krypto/
    📁 src/
        📁 algorithms/
            📄 gcm.jl (Content follows below)
            📄 sea128.jl (Content follows below)
            📄 xex_fde.jl (Content follows below)
        📁 math/
            📄 galois.jl (Content follows below)
        📁 util/
            📄 conversions.jl (Content follows below)
            📄 processor.jl (Content follows below)
        📄 Krypto.jl (Content follows below)
    📄 kauma
    📄 Manifest.toml
    📄 Project.toml
    📄 sample.json
    📄 sample_small.json
    📄 script.py


File Contents:
=============


===========================================
File: kauma
===========================================

#!/usr/bin/env julia

using JSON
#using PackageCompiler


include("src/util/processor.jl")
using .Processing: process

function main()
    file::String = "./sample.json"

    if length(ARGS) == 1
        file = ARGS[1]
    end
    
    jsonContent = JSON.parsefile(file)
    process(jsonContent)
end



main()


#create_app(".", "MyAppCompiled",
#    precompile_execution_file="./kauma",
#    force=true,
#    filter_stdlibs=true,
#    cpu_target="native",
#)

# julia --threads=auto --project=. kauma

===========================================
File: src\Krypto.jl
===========================================

module Krypto

using JSON
include("util/processor.jl")

export process

end

===========================================
File: src\algorithms\gcm.jl
===========================================


module GCM

include("sea128.jl")
include("../math/galois.jl")

using Nettle
using Base64
using .Sea128: encrypt_sea, decrypt_sea
using .Galois: FieldElement


function ghash(key::Array{UInt8}, nonce::Array{UInt8}, text::Array{UInt8}, ad::Array{UInt8}, algorithm::String)

    enc_func = algorithm == "aes128" ? encrypt : encrypt_sea 
    auth_key = enc_func("aes128", key, zeros(UInt8, 16))

    len_block = vcat(
        reverse(reinterpret(UInt8, [length(ad) << 3])),
        reverse(reinterpret(UInt8, [length(text) << 3]))
    )

    auth_key_gf = FieldElement(auth_key, "gcm")
    asdf = (reinterpret(UInt128, [ad; zeros(UInt8, 16 - length(ad))]))[1]
    ad_pad_gf = FieldElement(asdf, "gcm")

    for i in 1:16:length(text)
        ad_pad_gf = ad_pad_gf * auth_key_gf
        ad_pad_gf = ad_pad_gf + text[i:i+15]
    end

    encas = enc_func("AES128", key, [nonce; UInt8[0,0,0,1]])
    println(encas)

    for byte in ad_pad_gf
        println(byte)
    end
    return ad_pad_gf .⊻ encas
end


function crypt_gcm(key::Array{UInt8}, text::Array{UInt8}, ad::Array{UInt8}, nonce::Array{UInt8}, algorithm::String)

    result_text = Array{UInt8}(undef, 0)
    enc_func = algorithm == "aes128" ? encrypt : encrypt_sea

    for i in 1:16:length(text)
        temp_nonce = [nonce; reverse!(reinterpret(UInt8, [UInt32(i+1)]))]
        enc_i = enc_func("AES128", key, temp_nonce)
        append!(result_text, text[i:i+15] .⊻ enc_i)
    end

    return result_text
end



function decrypt_gcm(key::Array{UInt8}, ciphertext::Array{UInt8}, ad::Array{UInt8}, nonce::Array{UInt8}, algorithm::String)
    plaintext = decrypt("AES128", key, ciphertext)
    return plaintext
end


function encrypt_gcm(key::Array{UInt8}, plaintext::Array{UInt8}, ad::Array{UInt8}, nonce::Array{UInt8}, algorithm::String)
    ciphertext = crypt_gcm(key, plaintext, ad, nonce, algorithm)
    return ciphertext
end




key = base64decode("Xjq/GkpTSWoe3ZH0F+tjrQ==")
text = base64decode("RGFzIGlzdCBlaW4gVGVzdA==")
ad = base64decode("QUQtRGF0ZW4=")
nonce = base64decode("4gF+BtR3ku/PUQci")
algorithm = "aes128"

println(nonce)

text = crypt_gcm(key, text, ad, nonce, algorithm)
println(text)
println(base64encode(text))

auth_tag = ghash(key, nonce, text, ad, algorithm)
println(auth_tag)


end

===========================================
File: src\algorithms\sea128.jl
===========================================

module Sea128

using Nettle

const SEA_CONST = Array{UInt8}([0xc0, 0xff, 0xee, 0xc0, 0xff, 0xee, 0xc0, 0xff, 0xee, 0xc0, 0xff, 0xee, 0xc0, 0xff, 0xee, 0x11])

function encrypt_sea(key::Array{UInt8}, input::Array{UInt8})
    return encrypt("AES128", key, input) .⊻ SEA_CONST
end

function encrypt_sea(algorithm::String, key::Array{UInt8}, input::Array{UInt8})
    return encrypt(algorithm, key, input) .⊻ SEA_CONST
end

function decrypt_sea(key::Array{UInt8}, input::Array{UInt8})
    return decrypt("AES128", key, input .⊻ SEA_CONST)
end

function decrypt_sea(algorithm::String, key::Array{UInt8}, input::Array{UInt8})
    return decrypt(algorithm, key, input .⊻ SEA_CONST)
end

end

===========================================
File: src\algorithms\xex_fde.jl
===========================================

module FDE

include("sea128.jl")
using .Sea128: encrypt_sea, decrypt_sea
using Base64


function mul_alpha!(tweak::Vector{UInt8})
    carry = (tweak[16] & 0x80) != 0
    for i in 16:-1:2
        tweak[i] = ((tweak[i] << 1) & 0xFF) | (tweak[i-1] >> 7)
    end
    tweak[1] = ((tweak[1] << 1) & 0xFF)
    tweak[1] = tweak[1] ⊻ carry ? 0x87 : 0x00
end


function crypt_fde(key::Array{UInt8}, tweak::Array{UInt8}, input::Array{UInt8}, mode::String)
    k1, k2 = key[1:16], key[17:32]

    tweak = encrypt_sea(k2, tweak)
    text = Array{UInt8}(undef, 0)
    crypt_function = mode == "encrypt" ? encrypt_sea : decrypt_sea

    for i in 1:16:length(input)
        block = input[i:i+15] .⊻ tweak
        append!(text, (crypt_function(k1, block) .⊻ tweak)) 
        mul_alpha!(tweak)
    end
    return text
end

function encrypt_fde(key::Array{UInt8}, tweak::Array{UInt8}, input::Array{UInt8})
    return crypt_fde(key, tweak, input, "encrypt")
end

function decrypt_fde(key::Array{UInt8}, tweak::Array{UInt8}, input::Array{UInt8})
    return crypt_fde(key, tweak, input, "decrypt")
end

end

===========================================
File: src\math\galois.jl
===========================================


module Galois
using Nemo
using Base64

struct FieldElement
    value::ZZRingElem
    semantic::String
    field::ZZRingElem
end

FieldElement(value::Int, semantic::String) = FieldElement(ZZ(value), semantic, ZZ(0x100000000000000000000000000000087))
FieldElement(value::UInt128, semantic::String) = FieldElement(ZZ(value), semantic, ZZ(0x100000000000000000000000000000087))
FieldElement(value::UInt128) = FieldElement(ZZRingElem(value), "XEX", ZZ(0x100000000000000000000000000000087))
FieldElement(value::ZZRingElem, semantic::String) = FieldElement(value, semantic, ZZ(0x100000000000000000000000000000087))

function FieldElement(poly::Array{UInt8}, semantic::String)
    aggregate = ZZ(0)
    one = ZZ(1)
    for i in poly
        if i < 128
            aggregate |= (one << Int(i))
        end
    end
    FieldElement(aggregate, semantic)
end


function FieldElement(base64::String, semantic::String)

    result::ZZRingElem = 0
    a_array = base64decode(base64)


    if semantic == "xex"
        for (i, byte) in enumerate(a_array)
            result = result | ZZRingElem(byte) << (8 * (i-1))
        end
    elseif semantic == "gcm" # + i&0b0000_0111 - i&0b1111_1000
        for (i, b) in enumerate(a_array)

            b = (b & 0xF0) >> 4 | (b & 0x0F) << 4
            b = (b & 0xCC) >> 2 | (b & 0x33) << 2
            b = (b & 0xAA) >> 1 | (b & 0x55) << 1
            
            result = result | (ZZRingElem(b) << ((i-1) * 8))
        end
    end

    return FieldElement(result, semantic)
end

import Base.:+
function Base.:+(a::FieldElement, b::FieldElement)
    if a.field != b.field
        throw(ArgumentError("Cannot add elements from different fields"))
    end
    return FieldElement(a.value ⊻ b.value, a.semantic, a.field)
end

function Base.:+(a::FieldElement, b::Vector{UInt8})

    value = a.value
    for i in 1:length(b)
        value = value ⊻ (ZZ(b[i]) << (8 * (i-1)))
    end
    return FieldElement(value, a.semantic, a.field)
end

import Base.:⊻
function Base.:⊻(a::FieldElement, b::FieldElement)
    return FieldElement(a.value ⊻ b.value, a.semantic, a.field)
end

function Base.:⊻(a::FieldElement, b::ZZRingElem)
    return FieldElement(a.value ⊻ b, a.semantic, a.field)
end

import Base.:<<
function Base.:<<(a::FieldElement, b::Int)
    return FieldElement(a.value << b, a.semantic, a.field)
end

import Base.:>>
function Base.:>>(a::FieldElement, b::Int)
    return FieldElement(a.value >> b, a.semantic, a.field)
end

import Base.:%
function Base.:%(a::FieldElement, b::FieldElement)
    return FieldElement(a.value % b.value, a.semantic, a.field)
end


# .length() returns the number of bits in the value
import Base.length
Base.length(a::FieldElement) = nbits(a.value)

import Base.:*
function Base.:*(a::FieldElement, b::FieldElement)
    if a.field != b.field
        throw(ArgumentError("Cannot multiply elements from different fields"))
    end

    aggregate = ZZRingElem(0)

    tmp_a = a.value
    tmp_b = b.value

    highest_field_bit = ZZRingElem(1) << (nbits(a.field) - 1)


    if (tmp_b) % 2 == 1
        aggregate ⊻= tmp_a
    end

    for i in 1:length(b)
        tmp_a <<= 1
        
        if (tmp_a & highest_field_bit) != 0
            tmp_a ⊻= a.field
        end
        
        if (tmp_b >> i) % 2 == 1
            aggregate ⊻= tmp_a
        end

    end
    
    return FieldElement(aggregate, a.semantic, a.field)
end



import Base: iterate, eltype, length
function Base.iterate(fe::FieldElement)
    # Start with first byte (index 0)
    return iterate(fe, 0)
end

function Base.iterate(fe::FieldElement, state)
    # Stop after 16 bytes (128 bits)
    if state >= 16
        return nothing
    end
    
    # Extract the current byte using bit shifting and masking
    mask = ZZ(0xFF)
    shift = state * 8
    
    byte_val = UInt8((fe.value >> shift) & mask)
    return (byte_val, state + 1)
end


import Base.show
function Base.show(io::IO, a::FieldElement)
    print(io, "FieldElement($(a.value), $(a.field))")
end

function bit_string(a::FieldElement)
    return join(reverse(digits(a.value, base=2, pad=128)))
end

function to_polynomial(a::FieldElement)
    return [x for x in 0:127 if (a.value >> x) % 2 == 1] 
end

const BIT_REVERSE_TABLE = UInt8[0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240, 8, 136, 72, 200, 40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248, 4, 132, 68, 196, 36, 164, 100, 228, 20, 148, 84, 212, 52, 180, 116, 244, 12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250, 6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254, 1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81, 209, 49, 177, 113, 241, 9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217, 57, 185, 121, 249, 5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117, 245, 13, 141, 77, 205, 45, 173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253, 3, 131, 67, 195, 35, 163, 99, 227, 19, 147, 83, 211, 51, 179, 115, 243, 11, 139, 75, 203, 43, 171, 107, 235, 27, 155, 91, 219, 59, 187, 123, 251, 7, 135, 71, 199, 39, 167, 103, 231, 23, 151, 87, 215, 55, 183, 119, 247, 15, 143, 79, 207, 47, 175, 111, 239, 31, 159, 95, 223, 63, 191, 127, 255]

function to_block(a::FieldElement)
    # Always work with 128 bits (16 bytes)
    BLOCK_SIZE = 16
    bytes = Vector{UInt8}(undef, BLOCK_SIZE)
    value = a.value
    
    mask = ZZ(0xFF)
    
    if a.semantic == "xex"
        for i in 0:(BLOCK_SIZE-1)
            shift = i * 8
            byte_val = UInt8((value >> shift) & mask)
            bytes[i + 1] = byte_val
        end
    elseif a.semantic == "gcm"
        for i in 0:(BLOCK_SIZE-1)
            shift = i * 8
            b = UInt8((value >> shift) & mask)
            bytes[i + 1] = BIT_REVERSE_TABLE[b + 1]
        end
    else
        throw(ArgumentError("Unknown semantic: $semantic"))
    end
    
    return base64encode(bytes)
end


function get_bytes(a::FieldElement)
    return base64decode(a.to_block())
end


import Base: getproperty
function getproperty(gf::FieldElement, sym::Symbol)
    if sym === :bit_string
        return () -> bit_string(gf)
    end
    if sym === :to_block
        return () -> to_block(gf)
    end
    if sym === :to_polynomial
        return () -> to_polynomial(gf)
    end
    return getfield(gf, sym)
end


end





===========================================
File: src\util\conversions.jl
===========================================



module Conversions
using Nemo
using Base64

function base64_to_Nemo(base64::String, semantic::String)

    result::ZZRingElem = 0
    a_array = base64decode(base64)

    if semantic == "xex"
        reverse!(a_array)
        for byte in a_array
            result = result << 8  # Shift left by 8 bits
            result = result | ZZ(byte)  # OR with current byte
        end
    elseif semantic == "gcm"
        for byte in a_array
            result = result << 8  # Shift left by 8 bits
            result = result | ZZ(byte)  # OR with current byte
        end
    end

    return result
end

end

===========================================
File: src\util\processor.jl
===========================================



module Processing
using JSON
using Base64
include("../math/galois.jl")
include("conversions.jl")
include("../algorithms/sea128.jl")
include("../algorithms/xex_fde.jl")
using .Galois: FieldElement
using .Conversions: base64_to_Nemo
using .Sea128: encrypt_sea, decrypt_sea
using .FDE: encrypt_fde, decrypt_fde


function add_numbers(jsonContent::Dict)
    return jsonContent["number1"] + jsonContent["number2"]
end

function subtract_numbers(jsonContent::Dict)
    return jsonContent["number1"] - jsonContent["number2"]
end

function poly2block(jsonContent::Dict)
    coefficients::Array{UInt8} = jsonContent["coefficients"]
    semantic::String = jsonContent["semantic"]
    gf = FieldElement(coefficients, semantic)
    return gf.to_block()
end

function block2poly(jsonContent::Dict)
    semantic::String = jsonContent["semantic"]
    block::String = jsonContent["block"]

    gf = FieldElement(block, semantic)

    result = gf.to_polynomial()
    return result
end

function gfmul(jsonContent::Dict)
    semantic::String = jsonContent["semantic"]
    a::String = jsonContent["a"]
    b::String = jsonContent["b"]

    gf_a = FieldElement(a, semantic)
    gf_b = FieldElement(b, semantic)

    product = gf_a * gf_b
    return product.to_block()
end

function sea128(jsonContent::Dict)
    mode::String = jsonContent["mode"]
    key::String = jsonContent["key"]
    input::String = jsonContent["input"]
    
    key_bytes = base64decode(key)
    input_bytes = base64decode(input)

    if mode == "encrypt"
        result_bytes = encrypt_sea(key_bytes, input_bytes)
    elseif mode == "decrypt"
        result_bytes = decrypt_sea(key_bytes, input_bytes)
    end

    return base64encode(result_bytes)
end

function xex(jsonContent::Dict)
    mode::String = jsonContent["mode"]
    key::String = jsonContent["key"]
    tweak::String = jsonContent["tweak"]
    input::String = jsonContent["input"]

    key_bytes = base64decode(key)
    tweak_bytes = base64decode(tweak)
    input_bytes = base64decode(input)

    if mode == "encrypt"
        result_bytes = encrypt_fde(key_bytes, tweak_bytes, input_bytes)
    elseif mode == "decrypt"
        result_bytes = decrypt_fde(key_bytes, tweak_bytes, input_bytes)
    end

    return base64encode(result_bytes)
end

function gcm_encrypt(jsonContent::Dict)
    println("gcm_encrypt")
    println("jsonContent: ", jsonContent)
    return ("ciphertext", "234234234234324", "H", "MAC")
end

function gcm_decrypt(jsonContent::Dict)
    println("gcm_decrypt")
    println("jsonContent: ", jsonContent)
    return "plaintext"
end

function padding_oracle_chaggpt(jsonContent::Dict)
    println("padding_oracle_chaggpt")
    println("jsonContent: ", jsonContent)
    return "plaintext"
end


ACTIONS::Dict{String, Vector{Any}} = Dict(
    "add_numbers" => [add_numbers, ["sum"]],
    "subtract_numbers" => [subtract_numbers, ["difference"]],
    "poly2block" => [poly2block, ["block"]],
    "block2poly" => [block2poly, ["coefficients"]],
    "gfmul" => [gfmul, ["polynomial"]],
    "sea128" => [sea128, ["ciphertext"]],
    "xex" => [xex, ["ciphertext"]],
    "gcm_encrypt" => [gcm_encrypt, ["ciphertext", "asdf", "H", "MAC"]],
    "gcm_decrypt" => [gcm_decrypt, ["plaintext"]],
    "padding_oracle" => [padding_oracle_chaggpt, ["plaintext"]],
)

function process(jsonContent::Dict)

    result_testcases = Dict()

    for (key, value) in jsonContent["testcases"]
        action = value["action"]
        arguments = value["arguments"]
        output_key = ACTIONS[action][2]

        if !haskey(ACTIONS, action)
            throw(ProcessingError("Unknown action: $action"))
        end

        result = ACTIONS[action][1](arguments)
        json_result = Dict()

        for (i, key) in enumerate(output_key)
            if length(ACTIONS[action][2]) == 1
                json_result[key] = result
            else
                json_result[key] = result[i]
            end
        end

        result_testcases[key] = json_result
    end

    println(JSON.json(result_testcases, 1))

end
end