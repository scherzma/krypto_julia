Directory Structure:
===================

📁 Krypto/
    📁 src/
        📁 math/
            📄 galois.jl (Content follows below)
        📁 util/
            📄 conversions.jl (Content follows below)
            📄 processor.jl (Content follows below)
    📄 kauma
    📄 Manifest.toml
    📄 Project.toml
    📄 sample.json
    📄 script.py


File Contents:
=============


===========================================
File: kauma
===========================================

#!/usr/bin/env julia

using JSON
include("src/util/processor.jl")
using .Processing: process

function main()
    file::String = "./sample.json"

    if length(ARGS) == 1
        file = ARGS[1]
    end
    
    jsonContent = JSON.parsefile(file)
    process(jsonContent)
end

main()


===========================================
File: src\math\galois.jl
===========================================


module Galois
using Nemo
using Base64

struct FieldElement
    value::ZZRingElem
    field::ZZRingElem
end

FieldElement(value::Int) = FieldElement(value, ZZ(0x100000000000000000000000000000087))
FieldElement(value::UInt128) = FieldElement(ZZ(value), ZZ(0x100000000000000000000000000000087))
FieldElement(value::ZZRingElem) = FieldElement(value, ZZ(0x100000000000000000000000000000087))

function FieldElement(poly::Array{UInt8}, semantic::String)
    aggregate = ZZ(0)
    one = ZZ(1)
    if semantic == "xex"
        for i in poly
            if i < 128
                aggregate |= one << (120 + i&0b0000_0111 -i&0b1111_1000)
            end
        end
    elseif semantic == "gcm"
        for i in poly
            if i < 128
                aggregate |= one << (127 - i)
            end
        end
    else
        throw(ArgumentError("Unknown semantic"))
    end
    FieldElement(aggregate)
end

import Base.:+
function Base.:+(a::FieldElement, b::FieldElement)
    if a.field != b.field
        throw(ArgumentError("Cannot add elements from different fields"))
    end
    return FieldElement(a.value ⊻ b.value, a.field)
end

import Base.:⊻
function Base.:⊻(a::FieldElement, b::FieldElement)
    return FieldElement(a.value ⊻ b.value, a.field)
end

function Base.:⊻(a::FieldElement, b::ZZRingElem)
    return FieldElement(a.value ⊻ b, a.field)
end

import Base.:<<
function Base.:<<(a::FieldElement, b::Int)
    return FieldElement(a.value << b, a.field)
end

import Base.:>>
function Base.:>>(a::FieldElement, b::Int)
    return FieldElement(a.value >> b, a.field)
end

import Base.:%
function Base.:%(a::FieldElement, b::FieldElement)
    return FieldElement(a.value % b.value, a.field)
end


# .length() returns the number of bits in the value
import Base.length
Base.length(a::FieldElement) = nbits(a.value)

import Base.:*
function Base.:*(a::FieldElement, b::FieldElement)
    if a.field != b.field
        throw(ArgumentError("Cannot multiply elements from different fields"))
    end

    aggregate = ZZRingElem(0)

    tmp_a = a.value
    tmp_b = b.value

    highest_field_bit = ZZRingElem(1) << (nbits(a.field) - 1)


    if (tmp_b) % 2 == 1
        aggregate ⊻= tmp_a
    end

    for i in 1:length(b)
        tmp_a <<= 1
        
        if (tmp_a & highest_field_bit) != 0
            tmp_a ⊻= a.field
        end
        
        if (tmp_b >> i) % 2 == 1
            aggregate ⊻= tmp_a
        end

    end
    
    return FieldElement(aggregate, a.field)
end


import Base.show
function Base.show(io::IO, a::FieldElement)
    print(io, "FieldElement($(a.value), $(a.field))")
end

function bit_string(a::FieldElement)
    return join(reverse(digits(a.value, base=2, pad=128))) # return join(reverse([(a.value >> i) % 2 == 1 ? 1 : 0 for i in 1:nbits(a.value)]))
end

function to_polynomial(a::FieldElement, semantic::String)
    result = Vector{UInt8}(undef, 0)

    if semantic == "xex"
        for i in 0:127
            if (a.value >> i) % 2 == 1
                push!(result, 120 + i&0b0000_0111 -i&0b1111_1000)
            end
        end
    elseif semantic == "gcm"
        for i in 0:127
            if (a.value >> i) % 2 == 1
                push!(result, 127 - i)
            end
        end
    else
        throw(ArgumentError("Unknown semantic"))
    end

    return result
end


function to_block(a::FieldElement, semantic::String)
    # Calculate number of bytes needed
    value = a.value
    bit_size = nbits(value)
    num_bytes = ceil(Int, bit_size / 8)
    
    bytes = Vector{UInt8}(undef, num_bytes)
    
    mask = ZZ(0xFF)
    for i in 0:(num_bytes-1)
        shift = i * 8
        byte_val = Int((value >> shift) & mask)
        bytes[num_bytes - i] = UInt8(byte_val)
    end
    
    return base64encode(bytes)
end



import Base: getproperty
function getproperty(gf::FieldElement, sym::Symbol)
    if sym === :block
        return (semantic::String) -> block(gf, semantic)
    end
    if sym === :bit_string
        return () -> bit_string(gf)
    end
    if sym === :to_block
        return (semantic::String) -> to_block(gf, semantic)
    end
    if sym === :to_polynomial
        return (semantic::String) -> to_polynomial(gf, semantic)
    end
    return getfield(gf, sym)
end


#a = FieldElement(0b11000100, 0b100000000000000000000)
#b = FieldElement(0b00000010, 0b100000000000000000000)
#c = a * b
#println(c)
#println(c.bit_string())

# 1422689339238542770217355994206306432
# 2658455991569831745807614120560689152

a = FieldElement(ZZRingElem(1422689339238542770217355994206306432)) # GF:340282366920938463463374607431768211591
b = FieldElement(ZZRingElem(2658455991569831745807614120560689152))
println(a)
println(b)
c = a * b    # 176974246126301064890833436885137752064
println(c)   # 10000101001001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
println(c.bit_string())



end





===========================================
File: src\util\conversions.jl
===========================================



module Conversions
using Nemo
using Base64

function base64_to_Nemo(base64::String, semantic::String)

    result::ZZRingElem = 0
    a_array = base64decode(base64)

    if semantic == "xex"
        reverse!(a_array)
        for byte in a_array
            result = result << 8  # Shift left by 8 bits
            result = result | ZZ(byte)  # OR with current byte
        end
    elseif semantic == "gcm"
        for byte in a_array
            result = result << 8  # Shift left by 8 bits
            result = result | ZZ(byte)  # OR with current byte
        end
    end

    return result
end

end

===========================================
File: src\util\processor.jl
===========================================



module Processing
using JSON
using Base64
include("../math/galois.jl")
include("conversions.jl")
using .Galois: FieldElement
using .Conversions: base64_to_Nemo

function add_numbers(jsonContent::Dict)
    return jsonContent["number1"] + jsonContent["number2"]
end

function subtract_numbers(jsonContent::Dict)
    return jsonContent["number1"] - jsonContent["number2"]
end

function poly2block(jsonContent::Dict)
    coefficients::Array{UInt8} = jsonContent["coefficients"]
    semantic::String = jsonContent["semantic"]
    gf = FieldElement(coefficients, semantic)
    return gf.to_block(semantic)
end

function block2poly(jsonContent::Dict)
    semantic::String = jsonContent["semantic"]
    block::String = jsonContent["block"]

    println("Block: ", block)
    println("Semantic: ", semantic)



    gf = FieldElement(base64_to_Nemo(block, semantic))

    result = gf.to_polynomial(semantic)
    println("Result: ", [Int(b) for b in result])
    return result
end

function gfmul(jsonContent::Dict)
    semantic::String = jsonContent["semantic"]
    a::String = jsonContent["a"]
    b::String = jsonContent["b"]

    a_ZZ = base64_to_Nemo(a, semantic)
    b_ZZ = base64_to_Nemo(b, semantic)

    println("a_ZZ: ", a_ZZ)
    println("b_ZZ: ", b_ZZ)

    gf_a = FieldElement(a_ZZ)
    gf_b = FieldElement(b_ZZ)

    product = gf_a * gf_b
    return (product).to_block(semantic)
end

function sea128(jsonContent::Dict)
    println("sea128")
    println("jsonContent: ", jsonContent)
    return "ciphertext"
end

function xex(jsonContent::Dict)
    println("xex")
    println("jsonContent: ", jsonContent)
    return "ciphertext"
end

function gcm_encrypt(jsonContent::Dict)
    println("gcm_encrypt")
    println("jsonContent: ", jsonContent)
    return ("ciphertext", "234234234234324", "H", "MAC")
end

function gcm_decrypt(jsonContent::Dict)
    println("gcm_decrypt")
    println("jsonContent: ", jsonContent)
    return "plaintext"
end

function padding_oracle_chaggpt(jsonContent::Dict)
    println("padding_oracle_chaggpt")
    println("jsonContent: ", jsonContent)
    return "plaintext"
end


ACTIONS::Dict{String, Vector{Any}} = Dict(
    "add_numbers" => [add_numbers, ["sum"]],
    "subtract_numbers" => [subtract_numbers, ["difference"]],
    "poly2block" => [poly2block, ["block"]],
    "block2poly" => [block2poly, ["coefficients"]],
    "gfmul" => [gfmul, ["polynomial"]],
    "sea128" => [sea128, ["ciphertext"]],
    "xex" => [xex, ["ciphertext"]],
    "gcm_encrypt" => [gcm_encrypt, ["ciphertext", "asdf", "H", "MAC"]],
    "gcm_decrypt" => [gcm_decrypt, ["plaintext"]],
    "padding_oracle" => [padding_oracle_chaggpt, ["plaintext"]],
)

function process(jsonContent::Dict)

    result_testcases = Dict()

    for (key, value) in jsonContent["testcases"]
        action = value["action"]
        arguments = value["arguments"]
        output_key = ACTIONS[action][2]

        if !haskey(ACTIONS, action)
            throw(ProcessingError("Unknown action: $action"))
        end

        result = ACTIONS[action][1](arguments)
        json_result = Dict()

        for (i, key) in enumerate(output_key)
            if length(ACTIONS[action][2]) == 1
                json_result[key] = result
            else
                json_result[key] = result[i]
            end
        end

        result_testcases[key] = json_result
    end

    println(JSON.json(result_testcases, 1))

end
end