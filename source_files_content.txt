Directory Structure:
===================

📁 krypto_julia/
    📁 src/
        📁 algorithms/
            📄 gcm.jl (Content follows below)
            📄 padding_oracle.jl (Content follows below)
            📄 padding_oracle.jl.print
            📄 sea128.jl (Content follows below)
            📄 xex_fde.jl (Content follows below)
        📁 math/
            📄 galois_fast.jl (Content follows below)
            📄 polynom.jl (Content follows below)
        📁 util/
            📄 processor.jl (Content follows below)
            📄 semantic_types.jl (Content follows below)
        📄 Krypto.jl (Content follows below)
    📄 .gitignore
    📄 build.jl (Content follows below)
    📄 build_cl.jl (Content follows below)
    📄 kauma
    📄 Manifest.toml
    📄 Project.toml
    📄 README.md
    📄 sample.json
    📄 sample_small.json
    📄 script.py


File Contents:
=============


===========================================
File: build.jl
===========================================

#!/usr/local/bin/julia

using PackageCompiler


create_app(".", "Krypto",
    precompile_execution_file="./kauma",
    cpu_target="native",
    force=true,
)

# julia --threads=auto --project=. kauma


===========================================
File: build_cl.jl
===========================================

using Pkg
using PackageCompiler

# Ensure required packages are installed
required_packages = ["JSON", "Nettle", "Sockets", "Base64"]

for package in required_packages
    if !haskey(Pkg.project().dependencies, package)
        Pkg.add(package)
    end
end

# Create executable from Krypto module
create_app(".", "build", precompile_execution_file="kauma", force=true)

# Make the compiled executable executable
chmod(joinpath("build", "bin", "Krypto"), 0o755)

# Create symlink for easier access
symlink_path = "Krypto"
if islink(symlink_path)
    rm(symlink_path)
end
symlink(joinpath("build", "bin", "Krypto"), symlink_path)

println("Build complete! You can now run ./Krypto sample.json")

===========================================
File: kauma
===========================================

#!/usr/local/bin/julia

using JSON
#using PackageCompiler

include("src/Krypto.jl")
using .Krypto: process

function main()
    file::String = "./sample.json"

    if length(ARGS) == 1
        file = ARGS[1]
    end
    
    jsonContent = JSON.parsefile(file)
    process(jsonContent)
end



main()


#create_app(".", "Krypto",
#    precompile_execution_file="./kauma",
#    force=true,
#    filter_stdlibs=true,
#    cpu_target="native",
#)

# julia --threads=auto --project=. kauma


===========================================
File: src\Krypto.jl
===========================================

module Krypto

using JSON
using Sockets 
using Base64
import Base: +, *, ⊻, <<, >>, %, show, length, ^, ÷, /, copy, <, >, ==, isless, √, getproperty, zeros
using Nettle: encrypt, decrypt

const SEA_CONST = Array{UInt8}([0xc0, 0xff, 0xee, 0xc0, 0xff, 0xee, 0xc0, 0xff, 0xee, 0xc0, 0xff, 0xee, 0xc0, 0xff, 0xee, 0x11])
const GF128_MODULUS = UInt128(0x87)  # x^128 + x^7 + x^2 + x + 1
const MASK_128 = UInt128(1) << 127
const BIT_REVERSE_TABLE = UInt8[0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240, 8, 136, 72, 200, 40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248, 4, 132, 68, 196, 36, 164, 100, 228, 20, 148, 84, 212, 52, 180, 116, 244, 12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250, 6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254, 1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81, 209, 49, 177, 113, 241, 9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217, 57, 185, 121, 249, 5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117, 245, 13, 141, 77, 205, 45, 173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253, 3, 131, 67, 195, 35, 163, 99, 227, 19, 147, 83, 211, 51, 179, 115, 243, 11, 139, 75, 203, 43, 171, 107, 235, 27, 155, 91, 219, 59, 187, 123, 251, 7, 135, 71, 199, 39, 167, 103, 231, 23, 151, 87, 215, 55, 183, 119, 247, 15, 143, 79, 207, 47, 175, 111, 239, 31, 159, 95, 223, 63, 191, 127, 255]

include("util/semantic_types.jl")
include("util/processor.jl")
include("math/galois_fast.jl")
include("math/polynom.jl")
include("algorithms/sea128.jl")
include("algorithms/xex_fde.jl")
include("algorithms/gcm.jl")
include("algorithms/padding_oracle.jl")


file::String = "./sample.json"

if length(ARGS) == 1
    file = ARGS[1]
end

jsonContent = JSON.parsefile(file)
process(jsonContent)

export process

end

===========================================
File: src\algorithms\gcm.jl
===========================================

arr_to_int(arr::Array{UInt8}) = reinterpret(UInt128, reverse(arr))[1]
padl(len::Int) = (16 - (len % 16)) % 16 ## pad with zeros to the next multiple of 16
pad_array(arr::Array{UInt8}) = [arr; zeros(UInt8, padl(length(arr)))]

function ghash(key::Array{UInt8}, nonce::Array{UInt8}, text::Array{UInt8}, ad::Array{UInt8}, algorithm::String)

    enc_func = algorithm == "aes128" ? encrypt : encrypt_sea 
    auth_key = enc_func("aes128", key, zeros(UInt8, 16))
    auth_key = FieldElement(arr_to_int(auth_key), GCM, false)

    len_block = vcat(
        reverse(reinterpret(UInt8, [length(ad) << 3])),
        reverse(reinterpret(UInt8, [length(text) << 3]))
    )
    
    Y = FieldElement(UInt128(0), GCM, false)
    data = [pad_array(ad); pad_array(text); len_block]

    for i in 1:16:(length(data) - 1)
        Y += data[i:i+15]
        Y *= auth_key
    end

    tag = Y + enc_func("AES128", key, [nonce; UInt8[0,0,0,1]])

    return tag, len_block, auth_key
end


function crypt_gcm(key::Array{UInt8}, text::Array{UInt8}, nonce::Array{UInt8}, algorithm::String)

    result_text = Array{UInt8}(undef, 0)
    enc_func = algorithm == "aes128" ? encrypt : encrypt_sea


    counter = 2
    for i in 1:16:(length(text))
        temp_nonce = [nonce; reverse!(reinterpret(UInt8, [UInt32(counter)]))]
        enc_i = enc_func("AES128", key, temp_nonce)
        end_idx = min(i+15, length(text))
        block = text[i:end_idx]
        enc_block = enc_i[1:length(block)]
        append!(result_text, block .⊻ enc_block)
        counter += 1
    end

    return result_text
end

function decrypt_gcm(key::Array{UInt8}, ciphertext::Array{UInt8}, ad::Array{UInt8}, nonce::Array{UInt8}, algorithm::String)
    auth_tag = ghash(key, nonce, ciphertext, ad, algorithm)
    plaintext = crypt_gcm(key, ciphertext, nonce, algorithm)
    return plaintext, auth_tag[1], auth_tag[2], auth_tag[3]
end


function encrypt_gcm(key::Array{UInt8}, plaintext::Array{UInt8}, ad::Array{UInt8}, nonce::Array{UInt8}, algorithm::String)
    ciphertext = crypt_gcm(key, plaintext, nonce, algorithm)
    auth_tag = ghash(key, nonce, ciphertext, ad, algorithm)
    return ciphertext, auth_tag[1], auth_tag[2], auth_tag[3]
end


===========================================
File: src\algorithms\padding_oracle.jl
===========================================

struct PaddingClient
    connection::TCPSocket
end

function PaddingClient(hostname::String, port::Int)
    client = connect(hostname, port)
    return PaddingClient(client)
end

function attack_block(hostname::String, port::Int, block::Array{UInt8}, previous_block::Array{UInt8})
    client = PaddingClient(hostname, port)
    write(client.connection, block)  # Send the block to be decrypted
    
    plaintext_block = zeros(UInt8, length(block))
    num_ivs::UInt16 = 256
    x_values = UInt8[]

    for current_byte in length(block):-1:1

        known_iv = zeros(UInt8, 16 - current_byte)
        for i in 1:16-current_byte
            known_iv[i] = x_values[i] ⊻ (17 - current_byte)
        end
        z_array::Array{UInt8} = zeros(UInt8, current_byte - 1)


        found_iv = false
        for current_iv_block in 0:num_ivs:255
            write(client.connection, UInt8[num_ivs & 0xFF,num_ivs >> 8])

            ivs = zeros(UInt8, num_ivs << 4)
            @inbounds for (block_iv_num, total_iv_num) in enumerate((current_iv_block:current_iv_block+num_ivs-1))
                #=
                This loop is a bit shitty. The ivs array could be created on the very top
                and always just changed a bit. But this is easier.
                =#
                base_idx = (block_iv_num-1) << 4 + 1
                ivs[base_idx+length(z_array)] = UInt8(total_iv_num)
                ivs[base_idx+length(z_array)+1 : base_idx+15] .= known_iv
            end

            write(client.connection, ivs)
            response = read(client.connection, num_ivs)

            for response_ind in eachindex(response)
                if response[response_ind] == 0x01
                    valid_padding_at = response_ind + current_iv_block - 1
                    result_padding = (17 - current_byte)
                    xi = valid_padding_at ⊻ result_padding
                    pushfirst!(x_values, xi)

                    decrypted_byte::UInt8 = previous_block[current_byte] ⊻ xi
                    plaintext_block[current_byte] = decrypted_byte
                    found_iv = true
                    break;
                end
            end

            if found_iv
                break;
            end
        end

    end

    close(client.connection)
    return plaintext_block
end

function de_pad(plaintext::Array{UInt8})
    return plaintext[1:end-plaintext[end]]
end


function padding_attack(hostname::String, port::Int, iv::Array{UInt8}, ciphertext::Array{UInt8})
    plaintext = Array{UInt8}(undef, 0)
    text = [iv; ciphertext]

    for i in 16:16:length(text)-16
        block_to_decrypt = text[i+1:i+16]
        previous_block = text[i-15:i]
        decrypted_block = attack_block(hostname, port, block_to_decrypt, previous_block)
        append!(plaintext, decrypted_block)
    end

    return de_pad(plaintext)
end

===========================================
File: src\algorithms\sea128.jl
===========================================

encrypt_sea(algorithm::String, key::Array{UInt8}, input::Array{UInt8}) = encrypt(algorithm, key, input) .⊻ SEA_CONST
decrypt_sea(algorithm::String, key::Array{UInt8}, input::Array{UInt8}) = decrypt(algorithm, key, input .⊻ SEA_CONST)

===========================================
File: src\algorithms\xex_fde.jl
===========================================


function mul_alpha!(tweak::Vector{UInt8})
    carry = (tweak[16] & 0x80) != 0
    for i in 16:-1:2
        tweak[i] = ((tweak[i] << 1) & 0xFF) | (tweak[i-1] >> 7)
    end
    tweak[1] = ((tweak[1] << 1) & 0xFF)
    tweak[1] = tweak[1] ⊻ (carry ? 0x87 : 0x00)
end


function crypt_fde(key::Array{UInt8}, tweak::Array{UInt8}, input::Array{UInt8}, mode::String)
    k1, k2 = key[1:16], key[17:32]

    tweak = encrypt_sea("aes128" ,k2, tweak)
    text = Array{UInt8}(undef, 0)
    crypt_function = mode == "encrypt" ? encrypt_sea : decrypt_sea

    for i in 1:16:length(input)
        block = input[i:i+15] .⊻ tweak
        append!(text, (crypt_function("aes128", k1, block) .⊻ tweak)) 
        mul_alpha!(tweak)
    end
    return text
end

encrypt_fde(key::Array{UInt8}, tweak::Array{UInt8}, input::Array{UInt8}) = crypt_fde(key, tweak, input, "encrypt")
decrypt_fde(key::Array{UInt8}, tweak::Array{UInt8}, input::Array{UInt8}) = crypt_fde(key, tweak, input, "decrypt")

===========================================
File: src\math\galois_fast.jl
===========================================

struct FieldElement
    value::UInt128
    semantic::Semantic
    skip_manipulation::Bool

    function FieldElement(value::UInt128, semantic::Semantic, skip_manipulation::Bool)::FieldElement
        if skip_manipulation
            return new(value, semantic, skip_manipulation)
        else
            return new(int_to_semantic(value, semantic), semantic, true)
        end
    end
end


@inline Base.:⊻(a::FieldElement, b::FieldElement)::FieldElement = FieldElement(a.value ⊻ b.value, a.semantic, true)
@inline Base.:⊻(a::FieldElement, b::UInt128)::FieldElement = FieldElement(a.value ⊻ b, a.semantic, true)
@inline Base.:>>(a::FieldElement, b::Int)::FieldElement = FieldElement(a.value >> b, a.semantic, true)
@inline Base.:%(a::FieldElement, b::UInt128)::FieldElement = FieldElement(a.value % b, a.semantic, true)
@inline Base.:%(a::FieldElement, b::FieldElement)::FieldElement = FieldElement(a.value % b.value, a.semantic, true)
@inline Base.show(io::IO, a::FieldElement)::Nothing = print(io, "FieldElement($(a.value), $(a.semantic))")
@inline bit_string(a::FieldElement)::String = join(reverse(digits(a.value, base=2, pad=128)))
@inline to_polynomial(a::FieldElement)::Array{UInt8} = [x for x in 0:127 if (a.value >> x) % 2 == 1]
@inline get_bytes(a::FieldElement)::Vector{UInt8} = base64decode(a.to_block())
@inline Base.:+(a::FieldElement, b::FieldElement)::FieldElement = FieldElement(a.value ⊻ b.value, a.semantic, true)
@inline Base.:-(a::FieldElement, b::FieldElement)::FieldElement = FieldElement(a.value ⊻ b.value, a.semantic, true)
@inline Base.:<(a::FieldElement, b::FieldElement)::Bool = a.value < b.value
@inline Base.:>(a::FieldElement, b::FieldElement)::Bool = a.value > b.value
@inline Base.:(==)(a::FieldElement, b::FieldElement)::Bool = a.value == b.value
@inline Base.isless(a::FieldElement, b::FieldElement)::Bool = a.value < b.value

function Base.:√(a::FieldElement)::FieldElement
    if is_zero(a)
        return a
    end
    result = a
    for _ in 1:127
        result = result * result
    end
    return result
end


@inline function int_to_semantic(x::UInt128, semantic::Semantic)::UInt128
    if semantic == GCM
        return bitreverse(x)
    elseif semantic == XEX
        return bswap(x)
    end
end


@inline function uint8_to_uint128(bytes::Vector{UInt8})::UInt128
    # length(bytes) == 16 || throw(ArgumentError("Input must be exactly 16 bytes")) # This should really be checked, but it's a tiny bit slower
    @inbounds begin
        result = (UInt128(bytes[1]) << 120) | (UInt128(bytes[2]) << 112) | (UInt128(bytes[3]) << 104) | (UInt128(bytes[4]) << 96) |
                 (UInt128(bytes[5]) << 88)  | (UInt128(bytes[6]) << 80)  | (UInt128(bytes[7]) << 72)  | (UInt128(bytes[8]) << 64) |
                 (UInt128(bytes[9]) << 56)  | (UInt128(bytes[10]) << 48) | (UInt128(bytes[11]) << 40) | (UInt128(bytes[12]) << 32) |
                 (UInt128(bytes[13]) << 24) | (UInt128(bytes[14]) << 16) | (UInt128(bytes[15]) << 8)  | UInt128(bytes[16])
    end
    return result
end

function FieldElement(poly::Array{UInt8}, semantic::Semantic)::FieldElement
    aggregate::UInt128 = 0
    one::UInt128 = 1
    for i in poly
        if i < 128
            aggregate |= (one << i)
        end
    end
    FieldElement(aggregate, semantic, true)
end

function FieldElement(base64::String, semantic::Semantic)::FieldElement
    a_array = base64decode(base64)
    value::UInt128 = uint8_to_uint128(a_array)
    FieldElement(int_to_semantic(value, semantic), semantic, true)
end



function Base.:+(a::FieldElement, b::Vector{UInt8})::FieldElement

    length(b) == 16 || throw(ArgumentError("Input must be exactly 16 bytes"))

    value = uint8_to_uint128(b)
    int_value = int_to_semantic(value, a.semantic)

    return FieldElement(int_value ⊻ a.value, a.semantic, true)
end


function Base.:*(a::FieldElement, b::FieldElement)::FieldElement
    aggregate = UInt128(0)
    tmp_a::UInt128 = a.value
    tmp_b::UInt128 = b.value


    if (tmp_b & UInt128(1)) == 1
        aggregate ⊻= tmp_a
    end

    prev_high_bit = UInt128(0)

    @inbounds for i in 1:128
        prev_high_bit = tmp_a >> 127
        tmp_a <<= UInt128(1)
        tmp_a ⊻= GF128_MODULUS * prev_high_bit

        tmp_b >>= UInt128(1)
        aggregate ⊻= tmp_a * (tmp_b & UInt128(1))
    end
    
    return FieldElement(aggregate, a.semantic, true)
end

function power(a::FieldElement, exponent::UInt128)::FieldElement
    result = FieldElement(UInt128(1), a.semantic, true)  # Initialize to 1
    base = a

    @inbounds for i in 0:127
        if (exponent >> i) & 1 == 1
            result = result * base
        end
        base = base * base
    end

    return result
end

function inverse(a::FieldElement)::FieldElement
    if is_zero(a)
        throw(ArgumentError("Cannot invert the zero element"))
    end
    exponent = UInt128(~UInt128(0)) - UInt128(1)  # 2^128 - 2
    return power(a, exponent)
end


# Corrected Division Function Using the Correct Inverse
function Base.:/(a::FieldElement, b::FieldElement)::FieldElement
    if b.value == 0
        throw(ErrorException("Division by zero"))
    end
    return a * inverse(b)
end


# Corrected Polynomial Long Division (÷)
function Base.:÷(a::FieldElement, b::FieldElement)::FieldElement # Polynomial Long Division
    if b.value == 0
        throw(ErrorException("Division by zero"))
    end
    if a.value == 0
        return FieldElement(UInt128(0), a.semantic, true)
    end
    if b.value == 1
        return a
    end

    numerator = a.value
    denominator = b.value
    quotient = UInt128(0)

    numerator_degree = 127 - leading_zeros(numerator)
    denominator_degree = 127 - leading_zeros(denominator)

    while numerator >= denominator
        shift = numerator_degree - denominator_degree
        shifted_divisor = denominator << shift
        numerator = numerator ⊻ shifted_divisor
        quotient |= UInt128(1) << shift
        numerator_degree = 127 - leading_zeros(numerator)
    end
    return FieldElement(quotient, a.semantic, true)
end


function to_block(a::FieldElement)::String
    bytes = Vector{UInt8}(undef, 16)
    value::UInt128 = a.value

    
    if a.semantic == XEX
        bytes = reinterpret(UInt8, [value])
    elseif a.semantic == GCM
        value = bitreverse(value)
        bytes = reverse!(reinterpret(UInt8, [value]))
    end
    
    return base64encode(bytes)
end


function is_zero(a::FieldElement)::Bool
    return a.value == 0
end


import Base: getproperty
@inline function getproperty(gf::FieldElement, sym::Symbol)
    if sym === :bit_string
        return () -> bit_string(gf)
    end
    if sym === :to_block
        return () -> to_block(gf)
    end
    if sym === :to_polynomial
        return () -> to_polynomial(gf)
    end
    if sym === :is_zero
        return () -> is_zero(gf)
    end
    if sym === :inverse
        return () -> inverse(gf)
    end
    return getfield(gf, sym)
end


===========================================
File: src\math\polynom.jl
===========================================


struct Polynomial
    coefficients::Array{FieldElement}
    power::Int

    function Polynomial(coefficients::Array{FieldElement})::Polynomial
        new(coefficients, length(coefficients))
    end
end

function Polynomial(coefficients::Array{String})::Polynomial
    elements::Array{FieldElement} = [FieldElement(x, GCM) for x in coefficients]
    return Polynomial(elements)   # Probably have to reverse the coefficients
end


function is_zero(p::Polynomial)::Bool
    return p.power == 0 || (p.power == 1 && p.coefficients[1].is_zero())
end


function reduce_pol(p::Polynomial)::Polynomial
    new_power = p.power
    while new_power > 0 && p.coefficients[new_power].value == 0
        new_power -= 1
    end
    
    if new_power == p.power
        return p
    end

    if new_power == 0
        return Polynomial([FieldElement(UInt128(0), GCM, true)])
    end
    
    return Polynomial(p.coefficients[1:new_power])
end

function Base.isless(a::Polynomial, b::Polynomial)::Bool
    if a.power < b.power
        return true
    elseif a.power > b.power
        return false
    else
        # Degrees are equal, compare coefficients from highest to lowest
        for i in a.power:-1:1
            if isless(a.coefficients[i], b.coefficients[i])
                return true
            elseif isless(b.coefficients[i], a.coefficients[i])
                return false
            end
        end
        return false  # Polynomials are equal
    end
end

function Base.:+(a::Polynomial, b::Polynomial)::Polynomial

    max_power = max(a.power, b.power)
    longer, shorter = a.power > b.power ? (a, b) : (b, a)
    result_coefficients::Array{FieldElement} = Array{FieldElement}(undef, max_power)

    for i in 1:max_power
        if i <= shorter.power
            result_coefficients[i] = longer.coefficients[i] + shorter.coefficients[i]
        else
            result_coefficients[i] = longer.coefficients[i]
        end
    end

    return Polynomial(result_coefficients).reduce_pol()
end

function Base.:-(a::Polynomial, b::Polynomial)::Polynomial
    return a + b
end

function Base.:*(a::Polynomial, b::Polynomial)::Polynomial
    result_coefficients::Array{FieldElement} = Array{FieldElement}(undef, a.power + b.power)
    for i in 1:length(result_coefficients)
        result_coefficients[i] = FieldElement(UInt128(0), GCM, false)
    end

    for i in 1:a.power
        for j in 1:b.power
            result_coefficients[i+j - 1] += a.coefficients[i] * b.coefficients[j]
        end
    end
    return Polynomial(result_coefficients).reduce_pol()
end

function Base.:^(a::Polynomial, b::Int)::Polynomial
    if b == 0
        return Polynomial([FieldElement(UInt128(1), GCM, true)])
    end
    
    result = Polynomial([FieldElement(UInt128(1), GCM, true)])
    base = a
    exponent = b

    while exponent > 0
        if exponent & 1 == 1
            result *= base
        end
        base *= base
        exponent >>= 1
    end

    return result.reduce_pol()
end

Base.copy(p::Polynomial) = Polynomial(copy(p.coefficients))

function Base.:/(a::Polynomial, b::Polynomial)::Tuple{Polynomial, Polynomial}
    if b.power == 0 && b.coefficients[1].value == 0
        throw(DivError("Polynomial division by zero"))
    end

    if a.power < b.power
        quotient = Polynomial([FieldElement(UInt128(0), GCM, true)])
        remainder = reduce_pol(a)
        return (quotient, remainder)
    end

    quotient_degree = a.power - b.power
    zero_fe = FieldElement(UInt128(0), GCM, false)
    quotient_coeffs = fill(zero_fe, quotient_degree + 1)
    remainder_coeffs = copy(a.coefficients)
    remainder_degree = a.power
    b_lead_coeff = b.coefficients[b.power]
    b_inv_lead = b_lead_coeff.inverse()  # Assuming an inverse method exists

    b_coeffs = b.coefficients
    b_power = b.power

    # Main division loop
    while remainder_degree >= b_power && remainder_degree > 0
        lead_coeff_rem = remainder_coeffs[remainder_degree]
        factor = lead_coeff_rem * b_inv_lead
        degree_diff = remainder_degree - b_power
        quotient_coeffs[degree_diff + 1] += factor
        @inbounds for i in 1:b_power
            j = i + degree_diff
            remainder_coeffs[j] -= b_coeffs[i] * factor
        end
        while remainder_degree > 0 && remainder_coeffs[remainder_degree].value == 0
            remainder_degree -= 1
        end
    end

    quotient = Polynomial(quotient_coeffs).reduce_pol()

    if remainder_degree == 0 && remainder_coeffs[1].value == 0
        remainder = Polynomial([FieldElement(UInt128(0), GCM, true)])
    else
        remainder = Polynomial(remainder_coeffs[1:remainder_degree]).reduce_pol()
    end

    return (quotient, remainder)
end

function gfpoly_powmod(A::Polynomial, M::Polynomial, k::Integer)::Polynomial
    if k < 0
        throw(ArgumentError("Exponent must be non-negative"))
    end
    one_fe = FieldElement(UInt128(1), GCM, true)
    result = Polynomial([one_fe])

    _, base = A / M

    while k > 0
        if (k & 1) == 1
            tmp = result * base
            _, result = tmp / M
        end
        tmp = base * base
        _, base = tmp / M
        k >>= 1
    end

    return result
end


function Base.:√(Q::Polynomial)::Polynomial

    # Validate that Q has only even exponents with non-zero coefficients
    for i in 0:(Q.power - 1)
        if isodd(i) && Q.coefficients[i + 1].value != 0
            throw(ArgumentError("Polynomial Q must have only even exponents with non-zero coefficients."))
        end
    end

    # The degree of the square root polynomial S will be floor(Q.power / 2)
    m = div(Q.power, 2)
    S_coeffs = Vector{FieldElement}(undef, m + 1)

    for i in 0:m
        q_2i = Q.coefficients[2 * i + 1]
        S_coeffs[i + 1] = √q_2i
    end

    return Polynomial(S_coeffs).reduce_pol()
end


function monic(A::Polynomial)::Polynomial
    if A.power == 0 && A.coefficients[1].value == 0
        throw(ArgumentError("Cannot make the zero polynomial monic"))
    end
    c = A.coefficients[A.power]
    c_inv = c.inverse()
    new_coeffs = [coeff * c_inv for coeff in A.coefficients]
    return Polynomial(new_coeffs).reduce_pol()
end


function diff(poly::Polynomial)::Polynomial
    derivative_coeffs::Array{FieldElement} = []
    coeff::FieldElement = FieldElement(UInt128(0), GCM, false)

    for i in 1:poly.power
        if isodd(i)
            coeff = poly.coefficients[i + 1]
            push!(derivative_coeffs, coeff)
        else
            push!(derivative_coeffs, FieldElement(UInt128(0), GCM, false))
        end
    end

    derivative_poly = Polynomial(derivative_coeffs).reduce_pol()

    return derivative_poly
end



function gcd(A::Polynomial, B::Polynomial)::Polynomial
    a = reduce_pol(A)
    b = reduce_pol(B)

    while !is_zero(b)
        _, r = a / b
        a, b = b, r
    end

    return monic(a)
end



function repr(p::Polynomial)::Array{String}
    return [gfe.to_block() for gfe in p.coefficients]
end


@inline function getproperty(p::Polynomial, sym::Symbol)
    if sym === :repr
        return () -> repr(p)
    end
    if sym === :reduce_pol
        return () -> reduce_pol(p)
    end
    if sym === :monic
        return () -> monic(p)
    end
    if sym === :diff
        return () -> diff(p)
    end
    if sym === :gcd
        return (b::Polynomial) -> gcd(p, b)
    end
    return getfield(p, sym)
end

===========================================
File: src\util\processor.jl
===========================================

function add_numbers(jsonContent::Dict)
    return jsonContent["number1"] + jsonContent["number2"]
end

function subtract_numbers(jsonContent::Dict)
    return jsonContent["number1"] - jsonContent["number2"]
end

function poly2block(jsonContent::Dict)
    coefficients::Array{UInt8} = jsonContent["coefficients"]
    semantic = from_string(jsonContent["semantic"])
    gf = FieldElement(coefficients, semantic)
    return gf.to_block()
end

function block2poly(jsonContent::Dict)
    semantic = from_string(jsonContent["semantic"])
    block::String = jsonContent["block"]

    gf = FieldElement(block, semantic)

    result = gf.to_polynomial()
    return result
end

function gfmul(jsonContent::Dict)
    semantic = from_string(jsonContent["semantic"])
    a::String = jsonContent["a"]
    b::String = jsonContent["b"]

    gf_a = FieldElement(a, semantic)
    gf_b = FieldElement(b, semantic)

    product = gf_a * gf_b
    return product.to_block()
end

function sea128(jsonContent::Dict)
    mode::String = jsonContent["mode"]
    key::String = jsonContent["key"]
    input::String = jsonContent["input"]
    
    key_bytes = base64decode(key)
    input_bytes = base64decode(input)

    if mode == "encrypt"
        result_bytes = encrypt_sea("aes128", key_bytes, input_bytes)
    elseif mode == "decrypt"
        result_bytes = decrypt_sea("aes128", key_bytes, input_bytes)
    end

    return base64encode(result_bytes)
end

function xex(jsonContent::Dict)
    mode::String = jsonContent["mode"]
    key::String = jsonContent["key"]
    tweak::String = jsonContent["tweak"]
    input::String = jsonContent["input"]

    key_bytes = base64decode(key)
    tweak_bytes = base64decode(tweak)
    input_bytes = base64decode(input)

    if mode == "encrypt"
        result_bytes = encrypt_fde(key_bytes, tweak_bytes, input_bytes)
    elseif mode == "decrypt"
        result_bytes = decrypt_fde(key_bytes, tweak_bytes, input_bytes)
    end

    return base64encode(result_bytes)
end

function gcm_crypt(jsonContent::Dict, mode::String)
    algorithm::String = jsonContent["algorithm"]
    key::String = jsonContent["key"]
    ad::String = jsonContent["ad"]
    nonce::String = jsonContent["nonce"]

    text::String = ""
    if mode == "encrypt"
        text = jsonContent["plaintext"]
    elseif mode == "decrypt"
        text = jsonContent["ciphertext"]
        tag::String = jsonContent["tag"]
    end

    key_bytes = base64decode(key)
    ad_bytes = base64decode(ad)
    nonce_bytes = base64decode(nonce)
    text_bytes = base64decode(text)

    if mode == "encrypt"
        result = encrypt_gcm(key_bytes, text_bytes, ad_bytes, nonce_bytes, algorithm)
        return base64encode(result[1]), result[2].to_block(), base64encode(result[3]), result[4].to_block()
    elseif mode == "decrypt"
        result = decrypt_gcm(key_bytes, text_bytes, ad_bytes, nonce_bytes, algorithm)
        return result[2].to_block() == tag, base64encode(result[1])
    end

    return result
end

function gcm_decrypt(jsonContent::Dict)
    mode::String = "decrypt"
    return gcm_crypt(jsonContent, mode)
end

function gcm_encrypt(jsonContent::Dict)
    mode::String = "encrypt"
    return gcm_crypt(jsonContent, mode)
end

function padding_oracle(jsonContent::Dict)
    hostname::String = jsonContent["hostname"]
    if hostname == "localhost"
        hostname = "127.0.0.1"
    end
    port::Int = jsonContent["port"]
    iv::Array{UInt8} = base64decode(jsonContent["iv"])
    ciphertext::Array{UInt8} = base64decode(jsonContent["ciphertext"])
    #result = padding_attack(hostname, port, iv, ciphertext)
    #return base64encode(result)
    return "test"
end

function polynomial_add(jsonContent::Dict)
    A::Array{String} = jsonContent["A"]
    B::Array{String} = jsonContent["B"]

    poly_A = Polynomial(A)
    poly_B = Polynomial(B)

    return (poly_A + poly_B).repr()
end

function polynomial_mul(jsonContent::Dict)
    A::Array{String} = jsonContent["A"]
    B::Array{String} = jsonContent["B"]

    poly_A = Polynomial(A)
    poly_B = Polynomial(B)

    return (poly_A * poly_B).repr()
end

function polynomial_pow(jsonContent::Dict)
    A::Array{String} = jsonContent["A"]
    B::Int = jsonContent["k"]

    poly_A = Polynomial(A)
    return (poly_A ^ B).repr()
end

function gfdiv(jsonContent::Dict)
    A::String = jsonContent["a"]
    B::String = jsonContent["b"]

    a = FieldElement(A, GCM)
    b = FieldElement(B, GCM)
    c = a / b
    return c.to_block()
end

function polynomial_divmod(jsonContent::Dict)
    A::Array{String} = jsonContent["A"]
    B::Array{String} = jsonContent["B"]

    poly_A = Polynomial(A)
    poly_B = Polynomial(B)
    result = poly_A / poly_B
    return result[1].repr(), result[2].repr()
end

function polynomial_powmod(jsonContent::Dict)
    A::Array{String} = jsonContent["A"]
    M::Array{String} = jsonContent["M"]
    k::Int = jsonContent["k"]

    poly_A = Polynomial(A)
    poly_M = Polynomial(M)

    return gfpoly_powmod(poly_A, poly_M, k).repr()
end

function polynomial_sort(jsonContent::Dict)
    polys_str::Array{Array{String}} = jsonContent["polys"]
    polys = [Polynomial(poly) for poly in polys_str]
    sorted_polys = sort(polys)
    return [poly.repr() for poly in sorted_polys]
end

function polynomial_make_monic(jsonContent::Dict)
    A::Array{String} = jsonContent["A"]
    poly_A = Polynomial(A)
    return poly_A.monic().repr()
end

function polynomial_sqrt(jsonContent::Dict)
    Q::Array{String} = jsonContent["Q"]
    poly_Q = Polynomial(Q)
    return (√poly_Q).repr()
end

function polynomial_diff(jsonContent::Dict)
    F::Array{String} = jsonContent["F"]
    poly_F = Polynomial(F)
    return poly_F.diff().repr()
end

function polynomial_gcd(jsonContent::Dict)
    A::Array{String} = jsonContent["A"]
    B::Array{String} = jsonContent["B"]
    poly_A = Polynomial(A)
    poly_B = Polynomial(B)
    ans = poly_A.gcd(poly_B)
    return ans.repr()
end

ACTIONS::Dict{String, Vector{Any}} = Dict(
    "add_numbers" => [add_numbers, ["sum"]],
    "subtract_numbers" => [subtract_numbers, ["difference"]],
    "poly2block" => [poly2block, ["block"]],
    "block2poly" => [block2poly, ["coefficients"]],
    "gfmul" => [gfmul, ["product"]],
    "sea128" => [sea128, ["output"]],
    "xex" => [xex, ["output"]],
    "gcm_encrypt" => [gcm_encrypt, ["ciphertext", "tag", "L", "H"]],
    "gcm_decrypt" => [gcm_decrypt, ["authentic", "plaintext"]],
    "padding_oracle" => [padding_oracle, ["plaintext"]],
    "gfpoly_add" => [polynomial_add, ["S"]],
    "gfpoly_mul" => [polynomial_mul, ["P"]],
    "gfpoly_pow" => [polynomial_pow, ["Z"]],
    "gfdiv" => [gfdiv, ["q"]],
    "gfpoly_divmod" => [polynomial_divmod, ["Q", "R"]],
    "gfpoly_powmod" => [polynomial_powmod, ["Z"]],
    "gfpoly_sort" => [polynomial_sort, ["sorted_polys"]],
    "gfpoly_make_monic" => [polynomial_make_monic, ["A*"]],
    "gfpoly_sqrt" => [polynomial_sqrt, ["S"]],
    "gfpoly_diff" => [polynomial_diff, ["F'"]],
    "gfpoly_gcd" => [polynomial_gcd, ["G"]],
)

function process(jsonContent::Dict)

    result_testcases = Dict()

    for (key, value) in jsonContent["testcases"]
        action = value["action"]
        arguments = value["arguments"]

        if !haskey(ACTIONS, action)
            #throw(ErrorException("Unknown action: $action"))
            continue
        end


        output_key = ACTIONS[action][2]
        result = nothing
        #println("Processing $action >>> ")
        #try
            result = ACTIONS[action][1](arguments)
        #catch e
        #    println(stderr, "Error: $e")
        #    continue
        #end

        json_result = Dict()

        for (i, key) in enumerate(output_key)
            if length(ACTIONS[action][2]) == 1
                json_result[key] = result
            else
                json_result[key] = result[i]
            end
        end

        result_testcases[key] = json_result
    end

    println(JSON.json(Dict("responses" => result_testcases)))

end

===========================================
File: src\util\semantic_types.jl
===========================================

@enum Semantic GCM XEX

function from_string(s::String)::Semantic
    return s == "gcm" ? GCM : XEX
end