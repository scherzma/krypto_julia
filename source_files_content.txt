Directory Structure:
===================

📁 krypto_julia/
    📁 src/
        📁 algorithms/
            📄 gcm.jl (Content follows below)
            📄 padding_oracle.jl (Content follows below)
            📄 sea128.jl (Content follows below)
            📄 xex_fde.jl (Content follows below)
        📁 math/
            📄 galois.jl.bak
            📄 galois_fast.jl (Content follows below)
        📁 testing/
            📄 performance_arr_to_int.jl (Content follows below)
            📄 performance_int_semantic.jl (Content follows below)
            📄 performance_multiply.jl (Content follows below)
        📁 util/
            📄 processor.jl (Content follows below)
            📄 semantic_types.jl (Content follows below)
        📄 Krypto.jl (Content follows below)
    📄 Manifest.toml
    📄 Project.toml
    📄 kauma
    📄 sample.json
    📄 sample_small.json
    📄 script.py


File Contents:
=============


===========================================
File: kauma
===========================================

#!/usr/bin/env julia

using JSON
#using PackageCompiler


include("src/util/processor.jl")
using .Processing: process

function main()
    file::String = "./sample.json"

    if length(ARGS) == 1
        file = ARGS[1]
    end
    
    jsonContent = JSON.parsefile(file)
    @time process(jsonContent)
end



main()


#create_app(".", "Krypto",
#    precompile_execution_file="./kauma",
#    force=true,
#    filter_stdlibs=true,
#    cpu_target="native",
#)

# julia --threads=auto --project=. kauma

===========================================
File: src/Krypto.jl
===========================================

module Krypto

using JSON
include("util/processor.jl")

export process

end

===========================================
File: src/algorithms/gcm.jl
===========================================


module GCM


include("../util/semantic_types.jl")
using .SemanticTypes

include("sea128.jl")
include("../math/galois_fast.jl")
using Nettle
using Base64
using .Sea128: encrypt_sea, decrypt_sea
using .Galois_quick: FieldElement_quick


arr_to_int(arr::Array{UInt8}) = reinterpret(UInt128, reverse(arr))[1]
padl(len::Int) = (16 - (len & 0x0F)) & 0x0F ## pad with zeros to the next multiple of 16
pad_array(arr::Array{UInt8}) = [arr; zeros(UInt8, padl(length(arr)))]

function ghash(key::Array{UInt8}, nonce::Array{UInt8}, text::Array{UInt8}, ad::Array{UInt8}, algorithm::String)

    enc_func = algorithm == "aes128" ? encrypt : encrypt_sea 
    auth_key = enc_func("aes128", key, zeros(UInt8, 16))
    auth_key = FieldElement_quick(arr_to_int(auth_key), SemanticTypes.GCM)

    len_block = vcat(
        reverse(reinterpret(UInt8, [length(ad) << 3])),
        reverse(reinterpret(UInt8, [length(text) << 3]))
    )
    
    Y = FieldElement_quick(UInt128(0), SemanticTypes.GCM)
    data = [pad_array(ad); pad_array(text); len_block]

    for i in 1:16:(length(data) - 1)
        Y += data[i:i+15]
        Y *= auth_key
    end

    tag = Y + enc_func("AES128", key, [nonce; UInt8[0,0,0,1]])

    return tag, len_block, auth_key
end


function crypt_gcm(key::Array{UInt8}, text::Array{UInt8}, nonce::Array{UInt8}, algorithm::String)

    result_text = Array{UInt8}(undef, 0)
    enc_func = algorithm == "aes128" ? encrypt : encrypt_sea


    for i in 1:16:(length(text))
        temp_nonce = [nonce; reverse!(reinterpret(UInt8, [UInt32(i+1)]))]
        enc_i = enc_func("AES128", key, temp_nonce)
        end_idx = min(i+15, length(text))
        block = text[i:end_idx]
        enc_block = enc_i[1:length(block)]
        append!(result_text, block .⊻ enc_block)
    end

    return result_text
end

function decrypt_gcm(key::Array{UInt8}, ciphertext::Array{UInt8}, ad::Array{UInt8}, nonce::Array{UInt8}, algorithm::String)
    auth_tag = ghash(key, nonce, ciphertext, ad, algorithm)
    plaintext = crypt_gcm(key, ciphertext, nonce, algorithm)
    return plaintext, auth_tag[1], auth_tag[2], auth_tag[3]
end


function encrypt_gcm(key::Array{UInt8}, plaintext::Array{UInt8}, ad::Array{UInt8}, nonce::Array{UInt8}, algorithm::String)
    ciphertext = crypt_gcm(key, plaintext, nonce, algorithm)
    auth_tag = ghash(key, nonce, ciphertext, ad, algorithm)
    return ciphertext, auth_tag[1], auth_tag[2], auth_tag[3]
end

end

===========================================
File: src/algorithms/padding_oracle.jl
===========================================

module PaddingOracle

using Sockets 


struct PaddingClient
    connection::TCPSocket
end

function PaddingClient(hostname::String, port::Int)
    client = connect(hostname, port)
    return PaddingClient(client)
end



function send_to_server(a::PaddingClient, data::Array{UInt8})
    write(a.connection, data)
end


function generate_ivs(padding_length::Int, decrypted_bytes::Array{UInt8}, original_iv::Array{UInt8}=zeros(UInt8, 16))
    ivs = UInt8[]  # Initialize an empty array to hold the concatenated IVs

    for i in 0:255
        # Copy the original IV to modify it for each attempt
        iv = copy(original_iv)

        # Adjust the known decrypted bytes to conform to the current padding length
        for j in 1:(padding_length - 1)
            position = 16 - (j - 1)
            iv[position] = iv[position] ⊻ decrypted_bytes[end - (j - 1)] ⊻ UInt8(padding_length)
        end

        # Modify the byte we're currently attacking
        position = 16 - (padding_length - 1)
        iv[position] = iv[position] ⊻ UInt8(i) ⊻ UInt8(padding_length)

        # Append the modified IV to the list
        append!(ivs, iv)
    end

    return ivs
end


function attack_block(client::PaddingClient, block::Array{UInt8})
    write(client.connection, block)

    dec_block = Array{UInt8}(undef, 0)

    num_ivs::UInt8 = 255

    for i in 1:length(block)
        write(client.connection, UInt8[num_ivs,00])
        ivs = generate_ivs(num_ivs, dec_block)
        println(ivs)
        write(client.connection, ivs)
    end

    return dec_block
end


function padding_attack(hostname::String, port::Int, iv::Array{UInt8}, ciphertext::Array{UInt8})
    client = PaddingClient(hostname, port)

    plaintext = Array{UInt8}(undef, 0)

    for i in 1:16:length(ciphertext)
        block = ciphertext[i:i+15]
        append!(plaintext, attack_block(client, block))
    end

    return plaintext
end


end



===========================================
File: src/algorithms/sea128.jl
===========================================

module Sea128

using Nettle

const SEA_CONST = Array{UInt8}([0xc0, 0xff, 0xee, 0xc0, 0xff, 0xee, 0xc0, 0xff, 0xee, 0xc0, 0xff, 0xee, 0xc0, 0xff, 0xee, 0x11])

encrypt_sea(algorithm::String, key::Array{UInt8}, input::Array{UInt8}) = encrypt(algorithm, key, input) .⊻ SEA_CONST
decrypt_sea(algorithm::String, key::Array{UInt8}, input::Array{UInt8}) = decrypt(algorithm, key, input .⊻ SEA_CONST)

end

===========================================
File: src/algorithms/xex_fde.jl
===========================================

module FDE

include("sea128.jl")
using .Sea128: encrypt_sea, decrypt_sea
using Base64


function mul_alpha!(tweak::Vector{UInt8})
    carry = (tweak[16] & 0x80) != 0
    for i in 16:-1:2
        tweak[i] = ((tweak[i] << 1) & 0xFF) | (tweak[i-1] >> 7)
    end
    tweak[1] = ((tweak[1] << 1) & 0xFF)
    tweak[1] = tweak[1] ⊻ (carry ? 0x87 : 0x00)
end


function crypt_fde(key::Array{UInt8}, tweak::Array{UInt8}, input::Array{UInt8}, mode::String)
    k1, k2 = key[1:16], key[17:32]

    tweak = encrypt_sea("aes128" ,k2, tweak)
    text = Array{UInt8}(undef, 0)
    crypt_function = mode == "encrypt" ? encrypt_sea : decrypt_sea

    for i in 1:16:length(input)
        block = input[i:i+15] .⊻ tweak
        append!(text, (crypt_function("aes128", k1, block) .⊻ tweak)) 
        mul_alpha!(tweak)
    end
    return text
end

encrypt_fde(key::Array{UInt8}, tweak::Array{UInt8}, input::Array{UInt8}) = crypt_fde(key, tweak, input, "encrypt")
decrypt_fde(key::Array{UInt8}, tweak::Array{UInt8}, input::Array{UInt8}) = crypt_fde(key, tweak, input, "decrypt")

end

===========================================
File: src/math/galois_fast.jl
===========================================


module Galois_quick

using ..SemanticTypes: Semantic, GCM, XEX
using Base64

import Base: +, *, ⊻, <<, >>, %, show, length

struct FieldElement_quick
    value::UInt128
    semantic::Semantic

    function FieldElement_quick(value::UInt128, semantic::Semantic, skip_mani::Bool=false)
        new(value, semantic)
    end
end

const GF128_MODULUS = UInt128(0x87)  # x^128 + x^7 + x^2 + x + 1
const MASK_128 = UInt128(1) << 127

const BIT_REVERSE_TABLE = UInt8[0, 128, 64, 192, 32, 160, 96, 224, 16, 144, 80, 208, 48, 176, 112, 240, 8, 136, 72, 200, 40, 168, 104, 232, 24, 152, 88, 216, 56, 184, 120, 248, 4, 132, 68, 196, 36, 164, 100, 228, 20, 148, 84, 212, 52, 180, 116, 244, 12, 140, 76, 204, 44, 172, 108, 236, 28, 156, 92, 220, 60, 188, 124, 252, 2, 130, 66, 194, 34, 162, 98, 226, 18, 146, 82, 210, 50, 178, 114, 242, 10, 138, 74, 202, 42, 170, 106, 234, 26, 154, 90, 218, 58, 186, 122, 250, 6, 134, 70, 198, 38, 166, 102, 230, 22, 150, 86, 214, 54, 182, 118, 246, 14, 142, 78, 206, 46, 174, 110, 238, 30, 158, 94, 222, 62, 190, 126, 254, 1, 129, 65, 193, 33, 161, 97, 225, 17, 145, 81, 209, 49, 177, 113, 241, 9, 137, 73, 201, 41, 169, 105, 233, 25, 153, 89, 217, 57, 185, 121, 249, 5, 133, 69, 197, 37, 165, 101, 229, 21, 149, 85, 213, 53, 181, 117, 245, 13, 141, 77, 205, 45, 173, 109, 237, 29, 157, 93, 221, 61, 189, 125, 253, 3, 131, 67, 195, 35, 163, 99, 227, 19, 147, 83, 211, 51, 179, 115, 243, 11, 139, 75, 203, 43, 171, 107, 235, 27, 155, 91, 219, 59, 187, 123, 251, 7, 135, 71, 199, 39, 167, 103, 231, 23, 151, 87, 215, 55, 183, 119, 247, 15, 143, 79, 207, 47, 175, 111, 239, 31, 159, 95, 223, 63, 191, 127, 255]

@inline Base.:⊻(a::FieldElement_quick, b::FieldElement_quick) = FieldElement_quick(a.value ⊻ b.value, a.semantic)
@inline Base.:⊻(a::FieldElement_quick, b::UInt128) = FieldElement_quick(a.value ⊻ b, a.semantic)
@inline Base.:>>(a::FieldElement_quick, b::Int) = FieldElement_quick(a.value >> b, a.semantic)
@inline Base.:>>(a::FieldElement_quick, b::Int) = FieldElement_quick(a.value >> b, a.semantic)
@inline Base.:%(a::FieldElement_quick, b::UInt128) = FieldElement_quick(a.value % b, a.semantic)
@inline Base.:%(a::FieldElement_quick, b::FieldElement_quick) = FieldElement_quick(a.value % b.value, a.semantic)
@inline Base.show(io::IO, a::FieldElement_quick) = print(io, "FieldElement($(a.value), $(a.semantic))")
@inline bit_string(a::FieldElement_quick) = join(reverse(digits(a.value, base=2, pad=128)))
@inline to_polynomial(a::FieldElement_quick) = [x for x in 0:127 if (a.value >> x) % 2 == 1]
@inline get_bytes(a::FieldElement_quick) = base64decode(a.to_block())
@inline Base.:+(a::FieldElement_quick, b::FieldElement_quick) = FieldElement_quick(a.value ⊻ b.value, a.semantic)



@inline function int_to_semantic(x::UInt128, semantic::Semantic)
    if semantic == GCM
        return bitreverse(x)
    elseif semantic == XEX
        return bswap(x)
    end
end


@inline function uint8_to_uint128(bytes::Vector{UInt8})::UInt128
    # length(bytes) == 16 || throw(ArgumentError("Input must be exactly 16 bytes")) # This should really be checked, but it's a tiny bit slower
    @inbounds begin
        result = (UInt128(bytes[1]) << 120) | (UInt128(bytes[2]) << 112) | (UInt128(bytes[3]) << 104) | (UInt128(bytes[4]) << 96) |
                 (UInt128(bytes[5]) << 88)  | (UInt128(bytes[6]) << 80)  | (UInt128(bytes[7]) << 72)  | (UInt128(bytes[8]) << 64) |
                 (UInt128(bytes[9]) << 56)  | (UInt128(bytes[10]) << 48) | (UInt128(bytes[11]) << 40) | (UInt128(bytes[12]) << 32) |
                 (UInt128(bytes[13]) << 24) | (UInt128(bytes[14]) << 16) | (UInt128(bytes[15]) << 8)  | UInt128(bytes[16])
    end
    return result
end



function FieldElement_quick(x::UInt128, semantic::Semantic)
    FieldElement_quick(int_to_semantic(x, semantic), semantic, true)
end

function FieldElement_quick(poly::Array{UInt8}, semantic::Semantic)
    aggregate::UInt128 = 0
    one::UInt128 = 1
    for i in poly
        if i < 128
            aggregate |= (one << i)
        end
    end
    FieldElement_quick(aggregate, semantic, true)
end

function FieldElement_quick(base64::String, semantic::Semantic)
    a_array = base64decode(base64)
    value::UInt128 = uint8_to_uint128(a_array)
    FieldElement_quick(int_to_semantic(value, semantic), semantic, true)
end



function Base.:+(a::FieldElement_quick, b::Vector{UInt8})

    length(b) == 16 || throw(ArgumentError("Input must be exactly 16 bytes"))

    value = uint8_to_uint128(b)
    int_value = int_to_semantic(value, a.semantic)

    return FieldElement_quick(int_value ⊻ a.value, a.semantic, true)
end


function Base.:*(a::FieldElement_quick, b::FieldElement_quick)
    aggregate = UInt128(0)
    tmp_a::UInt128 = a.value
    tmp_b::UInt128 = b.value


    if (tmp_b & UInt128(1)) == 1
        aggregate ⊻= tmp_a
    end

    prev_high_bit = UInt128(0)

    @inbounds for i in 1:128
        prev_high_bit = tmp_a >> 127
        tmp_a <<= UInt128(1)
        tmp_a ⊻= GF128_MODULUS * prev_high_bit

        tmp_b >>= UInt128(1)
        aggregate ⊻= tmp_a * (tmp_b & UInt128(1))
    end
    
    return FieldElement_quick(aggregate, a.semantic, true)
end


function to_block(a::FieldElement_quick)
    bytes = Vector{UInt8}(undef, 16)
    value::UInt128 = a.value

    
    if a.semantic == XEX
        bytes = reinterpret(UInt8, [value])
    elseif a.semantic == GCM
        value = bitreverse(value)
        bytes = reverse!(reinterpret(UInt8, [value]))
    end
    
    return base64encode(bytes)
end


import Base: getproperty
@inline function getproperty(gf::FieldElement_quick, sym::Symbol)
    if sym === :bit_string
        return () -> bit_string(gf)
    end
    if sym === :to_block
        return () -> to_block(gf)
    end
    if sym === :to_polynomial
        return () -> to_polynomial(gf)
    end
    return getfield(gf, sym)
end


end





===========================================
File: src/testing/performance_arr_to_int.jl
===========================================

using BenchmarkTools

# Original function
@inline function uint8_to_uint128_original(bytes::Vector{UInt8})::UInt128
    # length(bytes) == 16 || throw(ArgumentError("Input must be exactly 16 bytes")) # This should really be checked, but it's a tiny bit slower
    @inbounds begin
        result = (UInt128(bytes[1]) << 120) | (UInt128(bytes[2]) << 112) | 
                 (UInt128(bytes[3]) << 104) | (UInt128(bytes[4]) << 96) |
                 (UInt128(bytes[5]) << 88)  | (UInt128(bytes[6]) << 80) | 
                 (UInt128(bytes[7]) << 72)  | (UInt128(bytes[8]) << 64) |
                 (UInt128(bytes[9]) << 56)  | (UInt128(bytes[10]) << 48) | 
                 (UInt128(bytes[11]) << 40) | (UInt128(bytes[12]) << 32) |
                 (UInt128(bytes[13]) << 24) | (UInt128(bytes[14]) << 16) | 
                 (UInt128(bytes[15]) << 8)  | UInt128(bytes[16])
    end
    return result
end

# Alternative implementation using folding
@inline function uint8_to_uint128_folded(bytes::Vector{UInt8})::UInt128
    @inbounds begin
        # Split into 4 parts for better pipelining
        upper = (UInt128(bytes[1]) << 120) | (UInt128(bytes[2]) << 112) | 
                (UInt128(bytes[3]) << 104) | (UInt128(bytes[4]) << 96)
        
        upper_mid = (UInt128(bytes[5]) << 88) | (UInt128(bytes[6]) << 80) | 
                    (UInt128(bytes[7]) << 72) | (UInt128(bytes[8]) << 64)
        
        lower_mid = (UInt128(bytes[9]) << 56) | (UInt128(bytes[10]) << 48) | 
                    (UInt128(bytes[11]) << 40) | (UInt128(bytes[12]) << 32)
        
        lower = (UInt128(bytes[13]) << 24) | (UInt128(bytes[14]) << 16) | 
                (UInt128(bytes[15]) << 8) | UInt128(bytes[16])

        # Combine the parts
        result = upper | upper_mid | lower_mid | lower
    end
    return result
end

# Benchmark setup
function run_benchmarks()
    # Generate random test data
    test_bytes = rand(UInt8, 16)
    
    # Verify correctness
    result_original = uint8_to_uint128_original(test_bytes)
    result_folded = uint8_to_uint128_folded(test_bytes)
    @assert result_original == result_folded "Implementations produce different results!"

    println("\nOriginal implementation:")
    @btime uint8_to_uint128_original($(test_bytes))
    
    println("\nFolded implementation:")
    @btime uint8_to_uint128_folded($(test_bytes))

    # Stress test
    stress_test_size = 10000
    test_data = [rand(UInt8, 16) for _ in 1:stress_test_size]
    
    println("\nStress test with $stress_test_size random byte arrays:")
    println("Original:")
    @btime for bytes in $test_data
        uint8_to_uint128_original(bytes)
    end

    println("\nFolded:")
    @btime for bytes in $test_data
        uint8_to_uint128_folded(bytes)
    end
end

# Run the benchmarks
run_benchmarks()

===========================================
File: src/testing/performance_int_semantic.jl
===========================================

using BenchmarkTools

@enum Semantic GCM XEX


# First implementation using if-else
@inline first(x::UInt128, ::Val{GCM}) = bitreverse(x)
@inline first(x::UInt128, ::Val{XEX}) = bswap(x)

# Alternative implementation using ternary operator
@inline function second(x::UInt128, semantic::Semantic)
    if semantic == GCM
        return bitreverse(x)
    elseif semantic == XEX
        return bswap(x)
    end
end

function run_benchmarks()
    # Quick correctness check
    test_val = rand(UInt128)
    @assert first(test_val, Val(GCM)) == second(test_val, GCM)
    @assert first(test_val, Val(XEX)) == second(test_val, XEX)

    # Large-scale performance test
    test_size = 100_000_000
    test_numbers = [rand(UInt128) for _ in 1:test_size]
    
    println("\nLarge-scale performance test with $test_size iterations:")

    println("\n1:")
    @btime for x in $test_numbers
        first(x, Val(GCM))
    end

    @btime for x in $test_numbers
        first(x, Val(XEX))
    end

    println("\n2:")
    @btime for x in $test_numbers
        second(x, XEX)
    end

    @btime for x in $test_numbers
        second(x, GCM)
    end

end

run_benchmarks()

===========================================
File: src/testing/performance_multiply.jl
===========================================

using BenchmarkTools
using Base.Threads
# Constants
const GF128_MODULUS = UInt128(0x87)  # Standard GF(2^128) modulus

# Original struct definition modified to use only UInt128
struct FieldElement_quick
    value::UInt128
    semantic::Symbol  # Using Symbol instead of String for better performance
    reduced::Bool
end



# Original multiplication function
@inline function mult_original(a::FieldElement_quick, b::FieldElement_quick)
    aggregate = UInt128(0)
    tmp_a::UInt128 = a.value
    tmp_b::UInt128 = b.value
    
    if (tmp_b & UInt128(1)) == 1
        aggregate ⊻= tmp_a
    end
    
    @inbounds for _ in 1:16  # 128/8 = 16 iterations
        for _ in 1:8
            prev_high_bit = tmp_a >> 127
            tmp_a <<= UInt128(1)
            tmp_a ⊻= GF128_MODULUS * prev_high_bit

            tmp_b >>= 1
            aggregate ⊻= tmp_a * (tmp_b & UInt128(1))
        end
    end
    
    return FieldElement_quick(aggregate, a.semantic, true)
end


# SIMD-optimized version (experimental)
@inline function mult_safe(a::FieldElement_quick, b::FieldElement_quick)
    aggregate = UInt128(0)
    tmp_a::UInt128 = a.value
    tmp_b::UInt128 = b.value
    
    if (tmp_b & UInt128(1)) == 1
        aggregate ⊻= tmp_a
    end
    
    @inbounds for _ in 1:16  # 128/8 = 16 iterations
        for _ in 1:8
            prev_high_bit = tmp_a >> 127
            tmp_a <<= 1
            tmp_a ⊻= GF128_MODULUS * prev_high_bit

            tmp_b >>= 1
            aggregate ⊻= tmp_a * (tmp_b & 1)
        end
    end
    
    return FieldElement_quick(aggregate, a.semantic, true)
end








# Benchmark setup
function run_benchmarks()
    # Generate random test values
    test_a = FieldElement_quick(rand(UInt128), :xex, true)
    test_b = FieldElement_quick(rand(UInt128), :xex, true)
    
    # Verify correctness
    result_original = mult_original(test_a, test_b)
    result_simd = mult_safe(test_a, test_b)
    
    @assert result_original.value == result_simd.value "SIMD version produces different results!"


    

    println("Original implementation:")
    @btime mult_original($(test_a), $(test_b))


    println("\nSafe implementation:")
    @btime mult_safe($(test_a), $(test_b))



    
    # Additional stress test
    stress_test_size = 10000
    test_data = [(FieldElement_quick(rand(UInt128), :gcm, true), 
                  FieldElement_quick(rand(UInt128), :gcm, true)) 
                 for _ in 1:stress_test_size]
    
    println("\nStress test with $stress_test_size random pairs:")
    println("Original:")
    @btime for (a, b) in $test_data
        mult_original(a, b)
    end

    
    println("\nSafe:")
    @btime for (a, b) in $test_data
        mult_safe(a, b)
    end
end

# Run the benchmarks
run_benchmarks()

===========================================
File: src/util/processor.jl
===========================================



module Processing
using JSON
using Base64

include("../util/semantic_types.jl")
using .SemanticTypes: Semantic, from_string
include("../math/galois_fast.jl")
include("../algorithms/sea128.jl")
include("../algorithms/xex_fde.jl")
include("../algorithms/gcm.jl")
include("../algorithms/padding_oracle.jl")
using .PaddingOracle: PaddingClient, send_to_server, padding_attack
using .Galois_quick: FieldElement_quick
using .Sea128: encrypt_sea, decrypt_sea
using .FDE: encrypt_fde, decrypt_fde
using .GCM: encrypt_gcm, decrypt_gcm
using Base.Threads



function add_numbers(jsonContent::Dict)
    return jsonContent["number1"] + jsonContent["number2"]
end

function subtract_numbers(jsonContent::Dict)
    return jsonContent["number1"] - jsonContent["number2"]
end

function poly2block(jsonContent::Dict)
    coefficients::Array{UInt8} = jsonContent["coefficients"]
    semantic = from_string(jsonContent["semantic"])
    gf = FieldElement_quick(coefficients, semantic)
    return gf.to_block()
end

function block2poly(jsonContent::Dict)
    semantic = from_string(jsonContent["semantic"])
    block::String = jsonContent["block"]

    gf = FieldElement_quick(block, semantic)

    result = gf.to_polynomial()
    return result
end

function gfmul(jsonContent::Dict)
    semantic = from_string(jsonContent["semantic"])
    a::String = jsonContent["a"]
    b::String = jsonContent["b"]

    gf_a = FieldElement_quick(a, semantic)
    gf_b = FieldElement_quick(b, semantic)

    product = gf_a * gf_b
    return product.to_block()
end

function sea128(jsonContent::Dict)
    mode::String = jsonContent["mode"]
    key::String = jsonContent["key"]
    input::String = jsonContent["input"]
    
    key_bytes = base64decode(key)
    input_bytes = base64decode(input)

    if mode == "encrypt"
        result_bytes = encrypt_sea("aes128", key_bytes, input_bytes)
    elseif mode == "decrypt"
        result_bytes = decrypt_sea("aes128", key_bytes, input_bytes)
    end

    return base64encode(result_bytes)
end

function xex(jsonContent::Dict)
    mode::String = jsonContent["mode"]
    key::String = jsonContent["key"]
    tweak::String = jsonContent["tweak"]
    input::String = jsonContent["input"]

    key_bytes = base64decode(key)
    tweak_bytes = base64decode(tweak)
    input_bytes = base64decode(input)

    if mode == "encrypt"
        result_bytes = encrypt_fde(key_bytes, tweak_bytes, input_bytes)
    elseif mode == "decrypt"
        result_bytes = decrypt_fde(key_bytes, tweak_bytes, input_bytes)
    end

    return base64encode(result_bytes)
end

function gcm_crypt(jsonContent::Dict, mode::String)
    algorithm::String = jsonContent["algorithm"]
    key::String = jsonContent["key"]
    ad::String = jsonContent["ad"]
    nonce::String = jsonContent["nonce"]

    text::String = ""
    if mode == "encrypt"
        text = jsonContent["plaintext"]
    elseif mode == "decrypt"
        text = jsonContent["ciphertext"]
        tag::String = jsonContent["tag"]
    end

    key_bytes = base64decode(key)
    ad_bytes = base64decode(ad)
    nonce_bytes = base64decode(nonce)
    text_bytes = base64decode(text)

    if mode == "encrypt"
        result = encrypt_gcm(key_bytes, text_bytes, ad_bytes, nonce_bytes, algorithm)
        return base64encode(result[1]), result[2].to_block(), base64encode(result[3]), result[4].to_block()
    elseif mode == "decrypt"
        result = decrypt_gcm(key_bytes, text_bytes, ad_bytes, nonce_bytes, algorithm)
        return result[2].to_block() == tag, base64encode(result[1])
    end

    return result
end

function gcm_decrypt(jsonContent::Dict)
    mode::String = "decrypt"
    return gcm_crypt(jsonContent, mode)
end

function gcm_encrypt(jsonContent::Dict)
    mode::String = "encrypt"
    return gcm_crypt(jsonContent, mode)
end

function padding_oracle(jsonContent::Dict)
    hostname::String = jsonContent["hostname"]
    port::Int = jsonContent["port"]
    iv::Array{UInt8} = base64decode(jsonContent["iv"])
    ciphertext::Array{UInt8} = base64decode(jsonContent["ciphertext"])
    return padding_attack("127.0.0.1", port, iv, ciphertext)
end


ACTIONS::Dict{String, Vector{Any}} = Dict(
    "add_numbers" => [add_numbers, ["sum"]],
    "subtract_numbers" => [subtract_numbers, ["difference"]],
    "poly2block" => [poly2block, ["block"]],
    "block2poly" => [block2poly, ["coefficients"]],
    "gfmul" => [gfmul, ["polynomial"]],
    "sea128" => [sea128, ["ciphertext"]],
    "xex" => [xex, ["ciphertext"]],
    "gcm_encrypt" => [gcm_encrypt, ["ciphertext", "tag", "L", "H"]],
    "gcm_decrypt" => [gcm_decrypt, ["authentic", "plaintext"]],
    "padding_oracle" => [padding_oracle, ["plaintext"]],
)

function process(jsonContent::Dict)

    result_testcases = Dict()

    for (key, value) in jsonContent["testcases"]
        action = value["action"]
        arguments = value["arguments"]
        output_key = ACTIONS[action][2]

        if !haskey(ACTIONS, action)
            throw(ProcessingError("Unknown action: $action"))
        end

        result = nothing
        try
            result = ACTIONS[action][1](arguments)
        catch e
            println("Error: $e")
        end

        json_result = Dict()

        for (i, key) in enumerate(output_key)
            if length(ACTIONS[action][2]) == 1
                json_result[key] = result
            else
                json_result[key] = result[i]
            end
        end

        result_testcases[key] = json_result
    end

    println(JSON.json(Dict("testcases" => result_testcases)))

end
end

===========================================
File: src/util/semantic_types.jl
===========================================

module SemanticTypes
@enum Semantic GCM XEX

function from_string(s::String)::Semantic
    return s == "gcm" ? GCM : XEX
end

export Semantic, GCM, XEX, from_string
end