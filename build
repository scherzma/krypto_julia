#!/bin/bash

# File: build
# Description: Starts a Julia server in the background on an available port.
# Appends the used port to /tmp/julia_ports.tmp and ensures the server is ready before exiting.

LOCKFILE_DIR="/tmp"
PORTS_FILE="/tmp/julia_ports.tmp"
START_PORT=8000
MAX_PORT=9000  # Define an upper limit to prevent infinite loops
LOG_DIR="/tmp/julia_logs"

# Create log directory if it doesn't exist
mkdir -p "$LOG_DIR"

# Function to find an available port
find_available_port() {
    local port=$START_PORT
    while [ $port -le $MAX_PORT ]; do
        # Check if the port is in use
        if ! nc -z localhost $port; then
            echo $port
            return
        fi
        port=$((port + 1))
    done
    echo "No available ports found between $START_PORT and $MAX_PORT." >&2
    exit 1
}

# Find an available port
PORT=$(find_available_port)
LOCKFILE="$LOCKFILE_DIR/julia_server_$PORT.lock"
LOGFILE="$LOG_DIR/julia_server_$PORT.log"

# Remove any existing lockfile for this port
if [ -e "$LOCKFILE" ]; then
    echo "Removing existing lockfile $LOCKFILE."
    rm "$LOCKFILE"
fi

# Start the Julia server in the background with output redirected to a log file
julia -e "
    include(\"main.jl\")  # Include your main Julia file

    using Sockets
    main()

    const PORT = $PORT  # Define the port number
    const LOCKFILE = \"$LOCKFILE\"  # Define the lockfile path

    # Function to handle graceful shutdown
    function cleanup()
        if isfile(LOCKFILE)
            rm(LOCKFILE)
        end
        println(\"Julia server on port \$PORT shutting down.\")
        exit()
    end

    # Register the cleanup function to run on exit
    try
        Base.@async begin
            Base.signals(SIGINT) do
                cleanup()
            end
            Base.signals(SIGTERM) do
                cleanup()
            end
        end

        # Start listening on the specified port
        server = listen(PORT)
        println(\"Julia server started on port \$PORT\")

        # Create the lockfile to signal that the server is ready
        open(LOCKFILE, \"w\") do io
            write(io, \"Server started on port $PORT\\n\")
        end

        while true
            # Accept a client connection
            client = accept(server)
            @async begin
                try
                    # Read a line from the client
                    msg = readline(client)

                    # Call the main function with the received argument
                    result = main(msg)

                    # Send the result back to the client
                    write(client, \"\$result\n\")
                catch e
                    # In case of an error, send the error message back
                    write(client, \"Error: \$(e)\n\")
                end
                close(client)  # Close the client connection
            end
        end
    catch e
        # In case of an error before lockfile creation, ensure cleanup
        if isdefined(:LOCKFILE) && isfile(LOCKFILE)
            rm(LOCKFILE)
        end
        println(\"Failed to start Julia server on port $PORT: \$e\")
        exit(1)
    end
" > "$LOGFILE" 2>&1 &  # Redirect both stdout and stderr to log file and run in background

JULIA_PID=$!

# Function to clean up the lockfile and kill the Julia server if build exits unexpectedly
cleanup() {
    if [ -e "$LOCKFILE" ]; then
        echo "Removing lockfile $LOCKFILE."
        rm "$LOCKFILE"
    fi
    if ps -p "$JULIA_PID" > /dev/null 2>&1; then
        echo "Terminating Julia server (PID: $JULIA_PID)."
        kill "$JULIA_PID" 2>/dev/null
    fi
}
trap cleanup EXIT

# Append the port to the ports file
echo "$PORT" >> "$PORTS_FILE"

# Wait for the lockfile to be created, indicating the server is ready
TIMEOUT=10  # seconds
elapsed=0
while [ ! -e "$LOCKFILE" ] && [ $elapsed -lt $TIMEOUT ]; do
    sleep 0.5
    elapsed=$((elapsed + 1))
done

if [ -e "$LOCKFILE" ]; then
    echo "Julia server has been successfully started on port $PORT."
    # Remove the trap to prevent cleanup on normal exit
    trap - EXIT
    exit 0
else
    echo "Failed to start Julia server on port $PORT within the expected time." >&2
    # Optionally, kill the Julia process if it's still running
    kill "$JULIA_PID" 2>/dev/null
    # Remove the port from the ports file
    sed -i "\$d" "$PORTS_FILE"
    exit 1
fi
